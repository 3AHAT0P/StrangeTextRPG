import { capitalise } from "../utils/capitalise";
import { getRandomIntInclusive } from "../utils/getRandomIntInclusive";

import { AbstractActor, AbstractActorOptions, RewardBag, TypeByDeclensionOfNounOptions } from "./AbstractActor";

export const RatDeclensionOfNouns = {
  nominative: '–∫—Ä—ã—Å–∞',
  genitive: '–∫—Ä—ã—Å—ã',
  dative: '–∫—Ä—ã—Å–µ',
  accusative: '–∫—Ä—ã—Å—É',
  ablative: '–∫—Ä—ã—Å–æ–π',
  prepositional: '–æ –∫—Ä—ã—Å–µ',

  possessive: '–∫—Ä—ã—Å—ã',
};

export const RatDeclensionOfNounsPlural = {
  nominative: '–∫—Ä—ã—Å—ã',
  genitive: '–∫—Ä—ã—Å',
  dative: '–∫—Ä—ã—Å–∞–º',
  accusative: '–∫—Ä—ã—Å',
  ablative: '–∫—Ä—ã—Å–∞–º–∏',
  prepositional: '–æ –∫—Ä—ã—Å–∞—Ö',

  possessive: '–∫—Ä—ã—Å',
};

export class Rat extends AbstractActor {
  public type = '–∫—Ä—ã—Å–∞';

  public healthPoints: number;
  public armor: number;

  public attackDamage: number;
  public criticalChance: number;
  public criticalDamageModifier: number = 2;
  public accuracy: number;

  constructor(options: AbstractActorOptions = {}) {
    super(options);

    this.maxHealthPoints = 5;
    this.healthPoints = 5;
    this.armor = 0.1;
    this.attackDamage = .4;
    this.criticalChance = .4;
    this.accuracy = .6;
  }

  public getType(
    { declension, plural = false, withPostfix = false, capitalised = false }: TypeByDeclensionOfNounOptions,
  ): string {
    let result = plural ? RatDeclensionOfNounsPlural[declension] : RatDeclensionOfNouns[declension];

    if (capitalised) result = capitalise(result);
    if (this.typePostfix !== '' && withPostfix) result = `${result} ${this.typePostfix}`

    return 'üêÄ ' + result;
  }

  public getDeathMessage(): string {
    return `${this.getType({ declension: 'nominative', withPostfix: true, capitalised: true })} —Å–¥–æ—Ö–ª–∞, –∂–∞–ª–æ–±–Ω–æ –ø–∏—â–∞!`;
  }

  public getReward(): RewardBag {
    return {
      gold: getRandomIntInclusive(0, 10),
    };
  }
}
