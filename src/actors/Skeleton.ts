import { capitalise } from '@utils/capitalise';
import { getRandomIntInclusive } from '@utils/getRandomIntInclusive';
import { truncate } from '@utils/math';
import { returnByChance } from '@utils/returnByChance';

import {
  AbstractActor, AbstractActorOptions, RewardBag, TypeByDeclensionOfNounOptions,
} from './AbstractActor';
import { BrokenShieldArmor, StrongBonesBodyArmor } from './armor';
import { EmptyWeapon, RustedAxeWeapon, RustedSwordWeapon } from './weapon';

export const SkeletonDeclensionOfNouns = {
  nominative: '—Å–∫–µ–ª–µ—Ç',
  genitive: '—Å–∫–µ–ª–µ—Ç–∞',
  dative: '—Å–∫–µ–ª–µ—Ç—É',
  accusative: '—Å–∫–µ–ª–µ—Ç',
  ablative: '—Å–∫–µ–ª–µ—Ç–æ–º',
  prepositional: '–æ —Å–∫–µ–ª–µ—Ç–µ',

  possessive: '—Å–∫–µ–ª–µ—Ç–∞',
};

export const SkeletonDeclensionOfNounsPlural = {
  nominative: '—Å–∫–µ–ª–µ—Ç—ã',
  genitive: '—Å–∫–µ–ª–µ—Ç–æ–≤',
  dative: '—Å–∫–µ–ª–µ—Ç–∞–º',
  accusative: '—Å–∫–µ–ª–µ—Ç—ã',
  ablative: '—Å–∫–µ–ª–µ—Ç–∞–º–∏',
  prepositional: '–æ —Å–∫–µ–ª–µ—Ç–∞—Ö',

  possessive: '—Å–∫–µ–ª–µ—Ç–æ–≤',
};

interface SkeletonEquipmentSlots {
  body?: StrongBonesBodyArmor;
  leftHand?: BrokenShieldArmor;
  rightHand: RustedAxeWeapon | RustedSwordWeapon | EmptyWeapon;
}

// TODO:
export class Skeleton extends AbstractActor {
  public type = '—Å–∫–µ–ª–µ—Ç';

  get armor(): number {
    return truncate((this._wearingEquipment.body?.armor ?? 0) + (this._wearingEquipment.leftHand?.armor ?? 0), 2);
  }

  get attackDamage(): number { return this._wearingEquipment.rightHand.attackDamage; }

  get criticalChance(): number { return this._wearingEquipment.rightHand.criticalChance; }

  get criticalDamageModifier(): number { return this._wearingEquipment.rightHand.criticalDamageModifier; }

  get accuracy(): number { return this._wearingEquipment.rightHand.accuracy; }

  _wearingEquipment: SkeletonEquipmentSlots = {
    body: new StrongBonesBodyArmor(),
    leftHand: returnByChance([[new BrokenShieldArmor(), 0.5], [void 0, 1]])[0],
    rightHand: returnByChance<RustedSwordWeapon | RustedAxeWeapon | EmptyWeapon>(
      [[new RustedAxeWeapon(), 0.6], [new RustedSwordWeapon(), 0.8], [new EmptyWeapon(), 1]],
    )[0],
  };

  constructor(options: AbstractActorOptions = {}) {
    super(options);

    this.maxHealthPoints = 7;
    // –ö–æ–≥–¥–∞ —Å–∫–µ–ª–µ—Ç—ã –≤–æ—Å—Å—Ç–∞—é—Ç –∏–∑ –º–æ–≥–∏–ª, –∏–ª–∏ –æ—Ç–∫—É–¥–∞ —Ç–∞–º –æ–Ω–∏ –≤–æ—Å—Å—Ç–∞—é—Ç
    // –£ –Ω–∏—Ö —Ö–ø –Ω–µ –ø–æ–ª–Ω—ã–µ. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–µ–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±–∞–∫ –∏ —Ç.–¥.
    this.healthPoints = getRandomIntInclusive(3, 7);
  }

  public getType(
    {
      declension, plural = false, withPostfix = false, capitalised = false,
    }: TypeByDeclensionOfNounOptions,
  ): string {
    let result = plural ? SkeletonDeclensionOfNounsPlural[declension] : SkeletonDeclensionOfNouns[declension];

    if (capitalised) result = capitalise(result);
    if (this.typePostfix !== '' && withPostfix) result = `${result} ${this.typePostfix}`;

    return `üíÄ ${result}`;
  }

  public getDeathMessage(): string {
    return `${this.getType({ declension: 'nominative', withPostfix: true, capitalised: true })} —Å —Ç—Ä–µ—Å–∫–æ–º —Ä–∞—Å—Å—ã–ø–∞–ª—Å—è!`;
  }

  public getReward(): RewardBag {
    return {
      gold: getRandomIntInclusive(2, 15),
    };
  }
}
