import {
  AbstractEntity,
  InteractionEntity,
  DataContainer,
  createDataCollection,
  NPCEntity,
} from '@db/entities';

import { ConnectorTo, ConnectorFrom } from './Connector';

export const baseInfo = <const>{
  scenarioId: 902,
  locationId: 1,
};

interface DemoMerchantConnectors {
  data: Record<string, DataContainer<AbstractEntity>>,
  inboundOnStart: ConnectorFrom;
  outboundToReturn: ConnectorTo;
}

export const demoMerchantSeedRun = (): DemoMerchantConnectors => {
  const dataCollection = createDataCollection();

  const intro = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    isStart: true,
    text: '‚öôÔ∏è –ó–∞–≤–µ—Ä–Ω—É–≤ –∑–∞ —É–≥–æ–ª, —Ç—ã —É–≤–∏–¥–µ–ª —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –ø—Ä–∏–ª–∞–≤–∫–æ–º —Å–æ –≤—Å—è–∫–∏–º–∏ —Å–∫–ª—è–Ω–∫–∞–º–∏.',
  });

  const npcId = `Scenario:${baseInfo.scenarioId}|Location:${baseInfo.locationId}|NPC:1`;

  const npc = dataCollection.addContainer<NPCEntity>('NPC', {
    ...baseInfo,
    NPCId: 'Scenario:DEMO|NPC:1',
    subtype: 'MERCHANT',
  });

  dataCollection.addLink(intro, {
    ...baseInfo,
    to: npc.entity.interactionId,
    text: 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º (#1)',
    operation: `{{loadMerchantInfo "${npcId}"}}`,
    type: 'CUSTOM',
    subtype: 'DIALOG_START',
  });

  const i0 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ü—Ä–∏–≤–µ—Ç!',
  });

  const i1 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{get currentMerchant "name"}}]: –ü—Ä–∏–≤–µ—Ç!',
  });

  const i2 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{get currentMerchant "name"}}]: –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n'
      + '{{#each (get currentMerchant showcase) as | good |}}'
      + '{{trueIndex @index}}: {{good.name}} = {{good.price}} –∑–æ–ª–æ—Ç—ã—Ö (üìÄ)\n'
      + '{{/each}}',
  });

  const i3 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{get currentMerchant "name"}}]: –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?',
  });

  const i4 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{get currentMerchant "name"}}]: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É {{actorType player declension="genitive"}} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.',
  });

  const i5 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: '‚öôÔ∏è –£ {{actorType player declension="genitive"}} –æ—Å—Ç–∞–ª–æ—Å—å {{get player "gold"}} –∑–æ–ª–æ—Ç–∞ (üìÄ)',
  });

  const i6 = dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: 'üí¨ [{{get currentMerchant "name"}}]: –ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ :)',
  });

  dataCollection.addLink(npc, {
    ...baseInfo,
    to: i0.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  dataCollection.addLink(i0, {
    ...baseInfo,
    to: i1.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  dataCollection.addLink(i1, {
    ...baseInfo,
    to: i2.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  dataCollection.addLink(i2, {
    ...baseInfo,
    to: i3.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  dataCollection.addLink(i3, {
    ...baseInfo,
    to: i4.entity.interactionId,
    text: '',
    type: 'SYSTEM',
    subtype: 'DEAL_FAILURE',
  });

  dataCollection.addLink(i3, {
    ...baseInfo,
    to: i5.entity.interactionId,
    text: '',
    type: 'SYSTEM',
    subtype: 'DEAL_SUCCESS',
  });

  dataCollection.addLink(i3, {
    ...baseInfo,
    to: i6.entity.interactionId,
    text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ù–∏—á–µ–≥–æ, —Å–ø–∞—Å–∏–±–æ.',
    type: 'CUSTOM',
    subtype: 'OTHER',
    isPrintable: true,
  });

  dataCollection.addLink(i4, {
    ...baseInfo,
    to: i3.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  dataCollection.addLink(i5, {
    ...baseInfo,
    to: i3.entity.interactionId,
    text: '',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  return <const>{
    data: dataCollection.data,
    inboundOnStart(connect: ConnectorTo) {
      connect(intro, '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞');
    },
    outboundToReturn(returnInteraction: DataContainer<AbstractEntity>) {
      dataCollection.addLink(i6, {
        ...baseInfo,
        to: returnInteraction.entity.interactionId,
        text: '',
        type: 'AUTO',
        subtype: 'DIALOG_END',
      });
    },
  };
};
