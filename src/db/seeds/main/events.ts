import { RepositoriesHash } from '@db/DBService';
import { MapSpotModel } from '@db/entities';

interface EventBuilderOptions {
  spot: MapSpotModel;
  repositories: RepositoriesHash;
  baseInfo: {
    readonly scenarioId: number;
    readonly locationId: number;
  };
}

const events: Record<number, (options: EventBuilderOptions) => Promise<void>> = {
  async 1({ spot, repositories, baseInfo }: EventBuilderOptions) {
    const eventId = 1;
    const eventStates = <const>{
      INITIAL: 0,
      READY_TO_INTERACT: 1,
      FINISHED: 2,
    };
    const { interactionRepo, actionRepo } = repositories;
    const event1Interaction = await interactionRepo.create({
      ...baseInfo,
      interactionId: 9010,
      text: '–í–Ω–µ–∑–∞–ø–Ω–æ, {{actorType player declension="nominative"}} —Å–ø–æ—Ç—ã–∫–∞–µ—à—å—Å—è –æ —Ç—Ä—É–ø –∫—Ä—ã—Å—ã.',
    });

    await actionRepo.create({
      ...baseInfo,
      from: spot.id,
      to: event1Interaction.id,
      text: '',
      condition: `{{isLTE (get events ${eventId}) ${eventStates.READY_TO_INTERACT}}}`,
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: event1Interaction.id,
      to: spot.id,
      text: '',
      operation: `{{set events ${eventId} ${eventStates.READY_TO_INTERACT}}}`,
      type: 'AUTO',
    });

    const event1LookupInteraction = await interactionRepo.create({
      ...baseInfo,
      interactionId: 9011,
      text: '–ö—Ä—ã—Å–∞, –∫–∞–∫ –∫—Ä—ã—Å–∞. –ù–æ –≤ –±–æ–∫—É —É –Ω–µ–µ —Ç–æ—Ä—á–∏—Ç –Ω–æ–∂. –û, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —á–µ–º –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–∏—Ö —Ç–≤–∞—Ä–µ–π!',
    });

    await actionRepo.create({
      ...baseInfo,
      from: spot.id,
      to: event1LookupInteraction.id,
      text: 'üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø',
      condition: `{{isEQ (get events ${eventId}) ${eventStates.READY_TO_INTERACT}}}`,
      type: 'CUSTOM',
      isPrintable: true,
    });

    await actionRepo.create({
      ...baseInfo,
      from: event1LookupInteraction.id,
      to: spot.id,
      text: '',
      operation: `{{set events ${eventId} ${eventStates.FINISHED}}}`,
      type: 'AUTO',
    });
  },
};

export const eventBuilder = (id: number, options: EventBuilderOptions): Promise<void> => {
  if (!(id in events)) throw new Error('EventId is incorrect!');
  return events[id](options);
};
