import { RepositoriesHash } from '@db/DBService';
import { MapSpotModel, NPCModel } from '@db/entities';

interface NPCInteractBuilderOptions {
  spot: MapSpotModel;
  repositories: RepositoriesHash;
  npc: NPCModel;
  baseInfo: {
    readonly scenarioId: number;
    readonly locationId: number;
  };
}

const NPCInteractions: Record<number | 'default', (options: NPCInteractBuilderOptions) => Promise<void>> = {
  async default(options: NPCInteractBuilderOptions) {
    const {
      spot, repositories, npc: merchant, baseInfo,
    } = options;
    const { interactionRepo, actionRepo } = repositories;

    // @TODO: –¢—É—Ç –∞–π–¥–∏—à–Ω–∏–≥–∏ –ø–æ–ª–Ω–∞—è —Ñ–∏–≥–Ω—è
    const i0 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 0,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ü—Ä–∏–≤–µ—Ç!',
    });

    const i1 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 1,
      text: 'üí¨ [–¢–æ—Ä–≥–æ–≤–µ—Ü]: –ü—Ä–∏–≤–µ—Ç!',
    });

    const i2 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 2,
      text: 'üí¨ [–¢–æ—Ä–≥–æ–≤–µ—Ü]: –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n{{#each goods}}{{trueIndex @index}}: {{this.displayName}} = {{this.price}} –∑–æ–ª–æ—Ç—ã—Ö (üìÄ)\n{{/each}}',
    });

    const i3 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 3,
      text: 'üí¨ [–¢–æ—Ä–≥–æ–≤–µ—Ü]: –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?',
    });

    const i4 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 4,
      text: 'üí¨ [–¢–æ—Ä–≥–æ–≤–µ—Ü]: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É {{actorType player declension="genitive"}} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.',
    });

    const i5 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 5,
      text: '‚öôÔ∏è –£ {{actorType player declension="genitive"}} –æ—Å—Ç–∞–ª–æ—Å—å {{get player "gold"}} –∑–æ–ª–æ—Ç–∞ (üìÄ)',
    });

    const i6 = await interactionRepo.create({
      ...baseInfo,
      interactionId: 8 * 1e7 + merchant.id * 1e3 + 6,
      text: 'üí¨ [–¢–æ—Ä–≥–æ–≤–µ—Ü]: –ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ :)',
    });

    await actionRepo.create({
      ...baseInfo,
      from: merchant.id,
      to: i0.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i0.id,
      to: i1.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i1.id,
      to: i2.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i2.id,
      to: i3.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i3.id,
      to: i4.id,
      text: 'OnDealFailure',
      type: 'SYSTEM',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i3.id,
      to: i5.id,
      text: 'OnDealSuccess',
      type: 'SYSTEM',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i3.id,
      to: i6.id,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ù–∏—á–µ–≥–æ, —Å–ø–∞—Å–∏–±–æ.',
      type: 'CUSTOM',
      isPrintable: true,
    });

    await actionRepo.create({
      ...baseInfo,
      from: i4.id,
      to: i3.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i5.id,
      to: i3.id,
      text: '',
      type: 'AUTO',
    });

    await actionRepo.create({
      ...baseInfo,
      from: i6.id,
      to: spot.id,
      text: '',
      type: 'AUTO',
    });
  },
};

export const npcInteractionBuilder = (id: number | 'default', options: NPCInteractBuilderOptions): Promise<void> => {
  if (!(id in NPCInteractions)) throw new Error('EventId is incorrect!');
  return NPCInteractions[id](options);
};
