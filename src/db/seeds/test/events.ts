import {
  InteractionEntity,
  MapSpotEntity,
  DataCollection,
  DataContainer,
} from '@db/entities';

interface EventBuilderOptions {
  dataCollection: DataCollection;
  spot: DataContainer<MapSpotEntity>;
  baseInfo: {
    readonly scenarioId: number;
    readonly locationId: number;
  };
}

const events: Record<number, (options: EventBuilderOptions) => void> = {
  1({ spot, baseInfo, dataCollection }: EventBuilderOptions) {
    const eventId = 'Scenario:10001|Location:1|Event:1';

    const event1Interaction = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: '–í–Ω–µ–∑–∞–ø–Ω–æ, {{actorType player declension="nominative"}} —Å–ø–æ—Ç—ã–∫–∞–µ—à—å—Å—è –æ —Ç—Ä—É–ø –∫—Ä—ã—Å—ã.',
    });

    dataCollection.addLink(spot, {
      ...baseInfo,
      to: event1Interaction.entity.interactionId,
      text: '',
      condition: `{{eventStateIsEQ "${eventId}" "INITIAL"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(event1Interaction, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '',
      operation: `{{updateEventState "${eventId}" "READY_TO_INTERACT"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    const event1LookupInteraction = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: '–ö—Ä—ã—Å–∞, –∫–∞–∫ –∫—Ä—ã—Å–∞. –ù–æ –≤ –±–æ–∫—É —É –Ω–µ–µ —Ç–æ—Ä—á–∏—Ç –Ω–æ–∂. –û, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —á–µ–º –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–∏—Ö —Ç–≤–∞—Ä–µ–π!',
    });

    dataCollection.addLink(spot, {
      ...baseInfo,
      to: event1LookupInteraction.entity.interactionId,
      text: 'üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø',
      condition: `{{eventStateIsEQ "${eventId}" "READY_TO_INTERACT"}}`,
      type: 'CUSTOM',
      subtype: 'OTHER',
      isPrintable: true,
    });

    dataCollection.addLink(event1LookupInteraction, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '',
      operation: `{{updateEventState "${eventId}" "FINISHED"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });
  },
};

export const eventBuilder = (id: number, options: EventBuilderOptions): void => {
  if (!(id in events)) throw new Error('EventId is incorrect!');
  return events[id](options);
};
