import {
  InteractionEntity,
  NPCEntity,
  MapSpotEntity,
  DataContainer,
  DataCollection,
} from '@db/entities';

interface NPCInteractBuilderOptions {
  dataCollection: DataCollection;
  spot: DataContainer<MapSpotEntity>;
  baseInfo: {
    readonly scenarioId: number;
    readonly locationId: number;
  };
}

const NPCInteractions: Record<number, (options: NPCInteractBuilderOptions) => void> = {
  1(options: NPCInteractBuilderOptions): void {
    const {
      spot, baseInfo, dataCollection,
    } = options;

    const npcId = `Scenario:${baseInfo.scenarioId}|Location:${baseInfo.locationId}|NPC:1`;
    const npc = dataCollection.addContainer<NPCEntity>(
      'NPC',
      {
        ...baseInfo,
        NPCId: 1,
        subtype: 'MERCHANT',
      },
    );

    dataCollection.addLink(spot, {
      ...baseInfo,
      to: npc.entity.interactionId,
      text: 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º (#1)',
      operation: `{{loadMerchantInfo "${npcId}"}}`,
      type: 'CUSTOM',
      subtype: 'TALK_TO_NPC',
    });

    const i0 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ü—Ä–∏–≤–µ—Ç!',
    });

    const i1 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentMerchant "name"}}]: –ü—Ä–∏–≤–µ—Ç!',
    });

    const i2 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentMerchant "name"}}]: –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n'
        + '{{#each (get currentMerchant showcase) as | good |}}'
        + '{{trueIndex @index}}: {{good.name}} = {{good.price}} –∑–æ–ª–æ—Ç—ã—Ö (üìÄ)\n'
        + '{{/each}}',
    });

    const i3 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentMerchant "name"}}]: –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?',
    });

    const i4 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentMerchant "name"}}]: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É {{actorType player declension="genitive"}} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.',
    });

    const i5 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: '‚öôÔ∏è –£ {{actorType player declension="genitive"}} –æ—Å—Ç–∞–ª–æ—Å—å {{get player "gold"}} –∑–æ–ª–æ—Ç–∞ (üìÄ)',
    });

    const i6 = dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentMerchant "name"}}]: –ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ :)',
    });

    dataCollection.addLink(npc, {
      ...baseInfo,
      to: i0.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i0, {
      ...baseInfo,
      to: i1.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i1, {
      ...baseInfo,
      to: i2.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i2, {
      ...baseInfo,
      to: i3.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i3, {
      ...baseInfo,
      to: i4.entity.interactionId,
      text: '',
      type: 'SYSTEM',
      subtype: 'DEAL_FAILURE',
    });

    dataCollection.addLink(i3, {
      ...baseInfo,
      to: i5.entity.interactionId,
      text: '',
      type: 'SYSTEM',
      subtype: 'DEAL_SUCCESS',
    });

    dataCollection.addLink(i3, {
      ...baseInfo,
      to: i6.entity.interactionId,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ù–∏—á–µ–≥–æ, —Å–ø–∞—Å–∏–±–æ.',
      type: 'CUSTOM',
      subtype: 'OTHER',
      isPrintable: true,
    });

    dataCollection.addLink(i4, {
      ...baseInfo,
      to: i3.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i5, {
      ...baseInfo,
      to: i3.entity.interactionId,
      text: '',
      type: 'AUTO',
      subtype: 'OTHER',
    });

    dataCollection.addLink(i6, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '',
      operation: '{{unloadCurrentMerchant}}',
      type: 'AUTO',
      subtype: 'OTHER',
    });
  },
  2(options: NPCInteractBuilderOptions): void {
    const {
      spot, baseInfo, dataCollection,
    } = options;

    const npcId = `Scenario:${baseInfo.scenarioId}|Location:${baseInfo.locationId}|NPC:2`;
    const questId = `Scenario:${baseInfo.scenarioId}|Location:${baseInfo.locationId}|Quest:1`;

    const npc = dataCollection.addContainer<NPCEntity>(
      'NPC',
      {
        ...baseInfo,
        NPCId: 2,
        subtype: 'WITH_QUEST',
      },
    );

    dataCollection.addLink(spot, {
      ...baseInfo,
      to: npc.entity.interactionId,
      text: '',
      condition: `{{questStateIsEQ ${questId} "INITIAL"}}`,
      operation: `{{loadNPCInfo "${npcId}"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    // const npcName = '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü';

    const i0 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentNPC "name"}}]: –≠–π, –ü—É—Ç–Ω–∏–∫! –ü–æ–º–æ–≥–∏ –º–Ω–µ...',
    });

    options.dataCollection.addLink(npc, {
      ...baseInfo,
      to: i0.entity.interactionId,
      text: '',
      condition: `{{questStateIsEQ ${questId} "INITIAL"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    const i1 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentNPC "name"}}]: –ü—Ä–æ—Ö–æ–¥—è —Ç—É—Ç, —è –Ω–∞–ø–∞—Ä–æ–ª—Å—è –Ω–∞ –±–æ–ª—å—à—É—é –∫—Ä—ã—Å—É!\n'
        + '–£ –Ω–∞—Å –±—ã–ª —Ç—è–∂–µ–ª—ã–π –±–æ–π, –∏ —è –µ–µ —É–±–∏–ª\n'
        + '–û–¥–Ω–∞–∫–æ —É–π—Ç–∏ –∏–∑ –±–æ—è —Ü–µ–ª—ã–º, —É –º–µ–Ω—è –Ω–µ –≤—ã—à–ª–æ.\n'
        + '–Ø —Ç–µ–∂–µ–ª–æ —Ä–∞–Ω–µ–Ω, –∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.'
        + '–ü—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è. –ú–Ω–µ –Ω–µ —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å.'
        + '–ê —è –≤ –¥–æ–ª–≥—É –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å!',
    });

    options.dataCollection.addLink(i0, {
      ...baseInfo,
      to: i1.entity.interactionId,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?',
      type: 'CUSTOM',
      subtype: 'START_QUEST',
    });

    options.dataCollection.addLink(i0, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –û—Ç—Å—Ç–∞–Ω—å!',
      type: 'CUSTOM',
      subtype: 'TALK_TO_NPC',
    });

    options.dataCollection.addLink(i1, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '–•–æ—Ä–æ—à–æ, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —É–º—Ä–∏ –ø–æ–∫–∞ —è –≤–µ—Ä–Ω—É—Å—å',
      operation: `{{updateQuestState ${questId} "PHASE_1"}} {{unloadCurrentNPCInfo}}`,
      type: 'CUSTOM',
      subtype: 'OTHER',
    });

    options.dataCollection.addLink(i1, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '–ù–µ, —è –Ω–µ –∞–ª—å—Ç—Ä—É–∏—Å—Ç, –¥—Ä—É–≥–∏–º –ø–æ–º–æ–≥–∞—Ç—å. –ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è!',
      operation: `{{updateQuestState ${questId} "FINISHED_BAD"}} {{unloadCurrentNPCInfo}}`,
      type: 'CUSTOM',
      subtype: 'OTHER',
    });

    dataCollection.addLink(spot, {
      ...baseInfo,
      to: npc.entity.interactionId,
      text: '',
      condition: `{{questStateIsEQ ${questId} "PHASE_1"}}`,
      operation: `{{loadNPCInfo "${npcId}"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    const i2 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentNPC "name"}}]: –ù—É –∫–∞–∫, —Ç—ã –ø—Ä–∏–Ω–µ—Å?',
    });

    options.dataCollection.addLink(npc, {
      ...baseInfo,
      to: i2.entity.interactionId,
      text: '',
      condition: `{{questStateIsEQ ${questId} "PHASE_1"}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    const i3 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
      ...baseInfo,
      text: 'üí¨ [{{get currentNPC "name"}}]: –í–æ—Ç —Å–ø–∞—Å–∏–±–æ!',
    });

    options.dataCollection.addLink(i2, {
      ...baseInfo,
      to: i3.entity.interactionId,
      text: '–í–æ—Ç –¥–µ—Ä–∂–∏! (–û—Ç–¥–∞—Ç—å 1 –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è)',
      condition: '{{isGTE (get (get player "inventory") "healthPotions") 1}}',
      operation: `{{updateQuestState ${questId} "FINISHED_GOOD"}} {{unloadCurrentNPCInfo}}`,
      type: 'AUTO',
      subtype: 'OTHER',
    });

    options.dataCollection.addLink(i2, {
      ...baseInfo,
      to: spot.entity.interactionId,
      text: '–ù–µ—Ç –µ—â–µ',
      operation: '{{unloadCurrentNPCInfo}}',
      type: 'AUTO',
      subtype: 'OTHER',
    });
  },
};

export const npcInteractionBuilder = (id: number, options: NPCInteractBuilderOptions): void => {
  if (!(id in NPCInteractions)) throw new Error('EventId is incorrect!');

  return NPCInteractions[id](options);
};
