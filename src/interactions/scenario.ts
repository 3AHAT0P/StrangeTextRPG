import { AbstractUI } from "../ui/AbstractUI";
import { SimpleInteraction } from './SimpleInteraction';
import { Interaction } from "./Interaction";
import { BattleInteraction } from "./BattleInteraction";
import { Rat } from "../actors/Rat";
import { Player } from "../actors/Player";
import { AbstractInteraction } from "./AbstractInteraction";
import { AbstractActor } from "../actors/AbstractActor";
import { SessionState } from "../SessionState";
import { isPresent } from "../utils/check";

export interface NextLocation {
  actionMessage: string;
  interaction: AbstractInteraction;
}

export const getBaseInteractions = (ui: AbstractUI, state: SessionState) => {
  const exitInteraction = new Interaction(ui, {
    buildMessage() { return '–£–¥–∞—á–∏!\n'; },
    async activate() {
      state.finishSession();
      return null;
    }
  });

  const toBeContinuedInteraction = new SimpleInteraction(ui, { message: '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...\n' });

  const lastInteraction = new SimpleInteraction(ui, { message: '–ù—É –∏ —á—Ç–æ –¥–∞–ª—å—à–µ?' });

  toBeContinuedInteraction.addAction('auto', lastInteraction);
  lastInteraction.addAction('–í–°–ï! –•–í–ê–¢–ò–¢ –° –ú–ï–ù–Ø!', exitInteraction);

  return {
    toBeContinuedInteraction,
    lastInteraction,
    exitInteraction,
  };
}

export const buildZeroLocation = (ui: AbstractUI, state: SessionState): AbstractInteraction => {
  const introInteraction = new SimpleInteraction(ui, {
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç—É —Å—Ç—Ä–∞–Ω–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –†–ü–ì (–î–µ–º–æ –≤–µ—Ä—Å–∏—è).\n'
      + '–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
  });
  
  const nextLocation: NextLocation = {
    actionMessage: '–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–π',
    interaction: new Interaction(ui, {
      buildMessage() { return 'Reloading...'; },
      async activate() {
        state.player = new Player();
        return introInteraction;
      }
    }),
  };

  const firstLocation = buildFirstLocation(ui, state, nextLocation);
  const secondLocation = buildSecondLocation(ui, state, nextLocation);
  const thirdLocation = buildThirdLocation(ui, state, nextLocation);

  introInteraction
    .addAction('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å—é–∂–µ—Ç', firstLocation)
    .addAction('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ–µ–≤–∫—É', secondLocation)
    .addAction('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏', thirdLocation);

  return introInteraction;
}

export const buildFirstLocation = (ui: AbstractUI, state: SessionState, nextLocation?: NextLocation): AbstractInteraction => {
  const baseInteractions = getBaseInteractions(ui, state);

  const mainInteraction = new SimpleInteraction(ui, { message: '–ë–ï–†–ò –ú–ï–ß –ò –†–£–ë–ò!\n' });
  const takeSwordInteraction = new SimpleInteraction(ui, { message: '–õ–∞–¥–æ–Ω—å —Å–∂–∏–º–∞–µ—Ç —Ä—É–∫–æ—è—Ç—å –º–µ—á–∞ - —à–µ—Ä—à–∞–≤—É—é –∏ —Ç—ë–ø–ª—É—é.\n' });
  const attackInteraction = new SimpleInteraction(ui, { message: '–í–æ–∑–¥—É—Ö —Å–≤–∏—Å—Ç–∏—Ç, —Ä–∞—Å—Å–µ–∫–∞–µ–º—ã–π —Å—Ç–∞–ª—å—é, –∏ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π —Å–∏–ª—É—ç—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –¥–µ–ª–∞–µ—Ç —Å–∞–ª—å—Ç–æ –Ω–∞–∑–∞–¥.\n' });

  const lookAroundInteraction = new SimpleInteraction(ui, {
    message: '–°–µ—Ä—ã–π –ø–µ—Å–æ–∫, —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–µ –Ω–µ–±–æ, –∏ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π –∫–ª–∏–Ω–æ–∫, —Ç–æ—Ä—á–∞—â–∏–π –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–¥–∏–Ω—ã.\n'
      + '–í—Ä–µ–º–µ–Ω–∏ –Ω–µ –±—ã–ª–æ —É–∂–µ —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥; —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–∫—É–Ω–¥—ã —Å –∫—Ä–æ–≤—å—é —É—Ç–µ–∫–∞—é—Ç –≤ –ø–µ—Å–æ–∫.\n'
      + '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n',
  });

  mainInteraction
    .addAction('–í–ó–Ø–¢–¨ –ú–ï–ß', takeSwordInteraction)
    .addAction('–ü–û–ü–´–¢–ê–¢–¨–°–Ø –û–°–ú–û–¢–†–ï–¢–¨–°–Ø', lookAroundInteraction);

  takeSwordInteraction
    .addAction('–†–£–ë–ò–¢–¨', attackInteraction)
    .addAction('–ü–û–ü–´–¢–ê–¢–¨–°–Ø –û–°–ú–û–¢–†–ï–¢–¨–°–Ø', lookAroundInteraction);

  attackInteraction
    .addAction('–î–∞–ª—å—à–µ?', baseInteractions.toBeContinuedInteraction);

  lookAroundInteraction.addAction('auto', baseInteractions.lastInteraction);

  baseInteractions.lastInteraction.addAction('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', mainInteraction);

  if (nextLocation != null) baseInteractions.lastInteraction.addAction(nextLocation.actionMessage, nextLocation.interaction);

  return mainInteraction;
};

export const buildSecondLocation = (ui: AbstractUI, state: SessionState, nextLocation?: NextLocation): AbstractInteraction => {
  const baseInteractions = getBaseInteractions(ui, state);

  const mainInteraction = new Interaction(ui, {
    buildMessage() { return ''; },
    async activate() {
      const player = new Player();
      const battleInteraction = new BattleInteraction(ui, { player, enemies: [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' })] });
      baseInteractions.lastInteraction.addAction('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', mainInteraction);
      if (nextLocation != null) baseInteractions.lastInteraction.addAction(nextLocation.actionMessage, nextLocation.interaction);
      battleInteraction.addAction('auto', baseInteractions.lastInteraction);
      return battleInteraction;
    },
  })

  return mainInteraction;
};

export const buildThirdLocation = (ui: AbstractUI, state: SessionState, nextLocation?: NextLocation): AbstractInteraction => {
  const baseInteractions = getBaseInteractions(ui, state);

  const introInteraction = new SimpleInteraction(ui, {
    message: `–ü—Ä–∏–≤–µ—Ç ${state.additionalInfo.playerName}.\n`
      + `${state.player.getType({ declension: 'nominative', capitalised: true })} –æ—á–Ω—É–ª—Å—è –ø–æ—Å—Ä–µ–¥–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ä—É–∏–Ω.\n`
      + `${state.player.getType({ declension: 'nominative', capitalised: true })} –Ω–µ –∑–Ω–∞–µ—à—å –∫—Ç–æ —Ç—ã, —á—Ç–æ —Ç—ã –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n`,
  });

  baseInteractions.lastInteraction.removeAction('–í–°–ï! –•–í–ê–¢–ò–¢ –° –ú–ï–ù–Ø!');
  baseInteractions.lastInteraction.addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);
  if (nextLocation != null) baseInteractions.lastInteraction.addAction(nextLocation.actionMessage, nextLocation.interaction);

  const mainInteraction = new SimpleInteraction(ui, { message: `–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n` });

  const overviewInteraction = new Interaction(ui, {
    buildMessage() {
      return `–°—É–º—Ä–∞—á–Ω–æ.` 
        + ` ${state.player.getType({ declension: 'nominative', capitalised: true })} —Å–∏–¥–∏—à—å –æ–ø—ë—Ä—à–∏—Å—å –Ω–∞ —É—Ü–µ–ª–µ–≤—à–∏–π —É–≥–æ–ª —Å—Ç–µ–Ω—ã.`
        + ` –ù–∞–¥ ${state.player.getType({ declension: 'ablative'})} –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∫—Ä—ã—à–∏. –†—è–¥–æ–º –ø–æ—á—Ç–∏ –ø–æ—Ç—É—Ö—à–∏–π –∫–æ—Å—Ç–µ—Ä.`
        + ` –ü–æ–æ–¥–∞–ª—å –≤–µ–∑–¥–µ –≥—Ä—è–∑—å –∏ –ª—É–∂–∏. –ú–æ—Ä–æ—Å–∏—Ç –º–µ–ª–∫–∏–π –¥–æ–∂–¥–∏–∫.\n`;
    },
    async activate() {
      mainInteraction.addAction('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É', seeMyselfInteraction);
      return 'SUPER';
    }
  });

  const seeMyselfInteraction = new Interaction(ui, {
    buildMessage() {
      const stats = state.player.stats;
      return `${state.player.getType({ declension: 'possessive', capitalised: true })} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`
        + `–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è - ${stats.healthPoints} / ${stats.maxHealthPoints}\n`
        + `–ó–∞—â–∏—Ç–∞ - ${stats.armor}\n`
        + `–°–∏–ª–∞ —É–¥–∞—Ä–∞ - ${stats.attackDamage}\n`
        + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —É–¥–∞—Ä–æ–º - ${stats.accuracy}\n`
        + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —É—è–∑–≤–∏–º–æ–µ –º–µ—Å—Ç–æ - ${stats.criticalChance}\n`
        + `–í –∫–∞—Ä–º–∞–Ω–µ –∑–≤–µ–Ω—è—Ç ${state.player.gold} –∑–æ–ª–æ—Ç–∞\n`
      ;
    },
  });

  /*
    - - –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–µ –º–µ—Å—Ç–æ
    w - wall, —Å—Ç–µ–Ω–∞, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞
    b - break, –æ–±—Ä—ã–≤, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞
    0, 1, 2, ... - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
    m - merchant, —Ç–æ—Ä–≥–æ–≤–µ—Ü
    p - player, –∏–≥—Ä–æ–∫
    o - out, –≤—ã—Ö–æ–¥
    g - gold, –Ω–µ–º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞ (1-5)
    G - GOLD, –º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞ (10-20)
        N
    W - X - E
        S
    - - w w w w b b b b b b b - - - - -
    w w w 1 2 w 2 0 0 1 0 g w - - - - -
    w 0 w 0 1 w 1 0 1 0 w G w - - - - -
    w 0 0 0 w w 0 1 0 0 w 3 w - - - - -
    w p 0 0 1 0 1 w 1 0 w m w - - - - -
    w w w w 1 w w w 0 1 w w w w w w w w
    - - w 0 1 0 0 0 0 0 0 m 0 0 0 0 3 o
    - b b b b b b b w w w w w w w w w w
    - b - - - - - b - - - - - - - - - -
    - b b b b b b b - - - - - - - - - -
    - - - - - - - - - - - - - - - - - -
  */

  const map = [
    '-', '-', 'w', 'w', 'w', 'w', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '-', '-', '-', '-', '-',
    'w', 'w', 'w', '1', '2', 'w', '2', '0', '0', '1', '0', 'g', 'w', '-', '-', '-', '-', '-',
    'w', '0', 'w', '0', '1', 'w', '1', '0', '1', '0', 'w', 'G', 'w', '-', '-', '-', '-', '-',
    'w', '0', '0', '0', 'w', 'w', '0', '1', '0', '0', 'w', '3', 'w', '-', '-', '-', '-', '-',
    'w', 'p', '0', '0', '1', '0', '1', 'w', '1', '0', 'w', 'm', 'w', '-', '-', '-', '-', '-',
    'w', 'w', 'w', 'w', '1', 'w', 'w', 'w', '0', '1', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w',
    '-', '-', 'w', '0', '1', '0', '0', '0', '0', '0', '0', 'm', '0', '0', '0', '0', '3', 'o',
    '-', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w',
    '-', 'b', '-', '-', '-', '-', '-', 'b', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
  ];

  const currentPositionOnMap = {
    row: 4,
    column: 1,
  };

  const showMapInteraction = new Interaction(ui, {
    buildMessage() {
      // üü•üüßüü®üü©üü¶ üü™‚¨õÔ∏è‚¨úÔ∏èüü´
      let mapPiece = '';
      mapPiece += '‚¨õÔ∏è - –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–µ –º–µ—Å—Ç–æ\n';
      mapPiece += 'üü´ - wall, —Å—Ç–µ–Ω–∞, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n';
      mapPiece += 'üü™ - break, –æ–±—Ä—ã–≤, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n';
      mapPiece += '‚¨úÔ∏è - —á–∏—Å—Ç–æ–µ –º–µ—Å—Ç–æ\n';
      mapPiece += 'üü¶ - merchant, —Ç–æ—Ä–≥–æ–≤–µ—Ü\n';
      mapPiece += 'üü© - player, –∏–≥—Ä–æ–∫\n';
      mapPiece += 'üü• - out, –≤—ã—Ö–æ–¥\n';
      mapPiece += 'üü® - gold, –∑–æ–ª–æ—Ç–æ\n';
      mapPiece += '‚ùî - –Ω–µ —Ä–∞–∑–≤–µ–¥–∞–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n';
      mapPiece += '    N\n';
      mapPiece += 'W - X - E\n';
      mapPiece += '    S\n';
      mapPiece += '\n';
      for (let row = currentPositionOnMap.row - 1; row <= currentPositionOnMap.row + 1; row += 1) {
        mapPiece += '';
        for (let column = currentPositionOnMap.column - 1; column <= currentPositionOnMap.column + 1; column += 1) {
          const cell = map[row * 18 + column];
          if (row === currentPositionOnMap.row && column === currentPositionOnMap.column) mapPiece += 'üü©';
          else if (cell === '1' || cell === '2' || cell === '3') mapPiece += '‚ùî';
          else if (cell === '-') mapPiece += '‚¨õÔ∏è';
          else if (cell === 'w') mapPiece += 'üü´';
          else if (cell === 'b') mapPiece += 'üü™';
          else if (cell === '0') mapPiece += '‚¨úÔ∏è';
          else if (cell === 'm') mapPiece += 'üü¶';
          else if (cell === 'o') mapPiece += 'üü•';
          else if (cell === 'g') mapPiece += 'üü®';
          else if (cell === 'p') mapPiece += '‚¨úÔ∏è';
        }
        mapPiece += '\n';
      }
      ui.sendToUser(mapPiece, 'markdown');
      return 'mapPiece';
    }
  });

  const interactiveMap: Map<string, AbstractInteraction> = new Map();
  let userPositionInteraction: AbstractInteraction | null = null;

  for (let rowIndex = 0; rowIndex < 11; rowIndex += 1) {
    for (let columnIndex = 0; columnIndex < 18; columnIndex += 1) {
      const cell = map[rowIndex * 18 + columnIndex];
      let inputInteraction: AbstractInteraction | null = null;
      let outputInteraction: AbstractInteraction | null = null;
      if (cell === '0') {
        inputInteraction = new SimpleInteraction(ui, { message: '–¢—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.' });
        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);
      }
      if (cell === '1' || cell === '2' || cell === '3') {
        const internalInteraction = new SimpleInteraction(ui, { message: '–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.' });
        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        internalInteraction.addAction('auto', outputInteraction);
        inputInteraction = new BattleInteraction(ui, { player: state.player, enemies: Array.from(Array(Number(cell)), (_, index) => new Rat({ typePostfix: `‚Ññ${index + 1}` }))});
        inputInteraction.addAction('onWin', internalInteraction);
        inputInteraction.addAction('onDied', baseInteractions.lastInteraction);
      }
      if (cell === 'm') {
        const talkToMerchantInteraction = new SimpleInteraction(ui, {
          message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${state.additionalInfo.playerName}. –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?`,
        });

        const buyHealthPointInteraction = new Interaction(ui, {
          buildMessage() { return '–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä :)' },
          async activate() {
            const result = state.player.exchangeGoldToItem(10, { healthPoitions: 1 });
            if (!result) ui.sendToUser(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É ${state.player.getType({ declension: 'genitive' })} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`, 'default');
            return 'SUPER';
          }
        });

        inputInteraction = new SimpleInteraction(ui, {
          message: `${state.player.getType({ declension: 'nominative', capitalised: true })} –≤–∏–¥–∏—à—å —Ç–æ—Ä–≥–æ–≤—Ü–∞.`,
        });

        inputInteraction.addAction('üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', talkToMerchantInteraction);

        talkToMerchantInteraction.addAction('–ö—É–ø–∏—Ç—å 1 –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª—Ç—ã—Ö)', buyHealthPointInteraction);
        buyHealthPointInteraction.addAction('auto', inputInteraction);

        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ò–¥–µ–º –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);
      }
      if (cell === 'o') {
        inputInteraction = new SimpleInteraction(ui, {
          message: `${state.player.getType({ declension: 'nominative', capitalised: true })} –¥–æ–±—Ä–∞–ª—Å—è –¥–æ –≤—ã—Ö–æ–¥–∞! –ú–û–õ–û–î–ï–¶!!!`,
        });

        inputInteraction.addAction('auto', baseInteractions.lastInteraction);

        outputInteraction = inputInteraction;
      }
      if (cell === 'p') {
        inputInteraction = new SimpleInteraction(ui, {
          message: `–ü–µ—Ä–µ–¥ ${state.player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –≤—ã–±–æ—Ä –∫—É–¥–∞ –∏–¥—Ç–∏\n`,
        });

        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);

        userPositionInteraction = inputInteraction;
      }

      if (isPresent(inputInteraction) && isPresent(outputInteraction)) {
        outputInteraction.addAction('–û–≥–ª—è–¥–µ—Ç—Å—è', showMapInteraction);
        interactiveMap.set(`${rowIndex}:${columnIndex}`, inputInteraction);
        interactiveMap.set(`${rowIndex}:${columnIndex}=o`, outputInteraction);
        const NInteraction = interactiveMap.get(`${rowIndex - 1}:${columnIndex}`);
        const NInteractionOutput = interactiveMap.get(`${rowIndex - 1}:${columnIndex}=o`);
        if (isPresent(NInteraction)) {
          if (isPresent(NInteractionOutput)) NInteractionOutput.addAction('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì', inputInteraction);
          else NInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì', inputInteraction);
          outputInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–†', NInteraction);
        }
        const WInteraction = interactiveMap.get(`${rowIndex}:${columnIndex - 1}`);
        const WInteractionOutput = interactiveMap.get(`${rowIndex}:${columnIndex - 1}=o`);
        if (isPresent(WInteraction)) {
          if (isPresent(WInteractionOutput)) WInteractionOutput.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          else WInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          WInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          outputInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö', WInteraction);
        }
      }
    }
  }

  // const standUpInteraction = new SimpleInteraction(ui, { message: `–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç—Ä–∏ –ø—É—Ç–∏. –ö—É–¥–∞ –ø–æ–π–¥–µ—à—å?\n` });

  // const goForwardInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ø–µ—Ä–µ–¥.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.5) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });
  // const goLeftInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ª–µ–≤–æ.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.2) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });
  // const goRightInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ø—Ä–∞–≤–æ.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.8) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' }), new Rat({ typePostfix: '‚Ññ3' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });

  introInteraction.addAction('auto', mainInteraction);
  mainInteraction.addAction('–û–≥–ª—è–¥–µ—Ç—Å—è', overviewInteraction);
  if (isPresent(userPositionInteraction)) mainInteraction.addAction('–í—Å—Ç–∞—Ç—å', userPositionInteraction);
  mainInteraction.addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);
  overviewInteraction.addAction('auto', mainInteraction);
  seeMyselfInteraction.addAction('auto', mainInteraction);

  // standUpInteraction
  //   .addAction('–ü–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ', goLeftInteraction)
  //   .addAction('–ü–æ–π—Ç–∏ –ø—Ä—è–º–æ', goForwardInteraction)
  //   .addAction('–ü–æ–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–æ', goRightInteraction)
  //   .addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);

  return introInteraction;
};
