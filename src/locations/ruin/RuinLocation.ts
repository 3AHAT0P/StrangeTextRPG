/* eslint-disable no-await-in-loop */
import {
  AbstractActor,
  Player,
  Rat, Skeleton,
} from '@actors';
import { KnifeWeapon } from '@weapon';
import { MerchantNPC } from '@NPC/Merchant';
import {
  AbstractInteraction, Interaction,
  BattleInteraction, BATTLE_FINAL_ACTIONS,
} from '@interactions';
import { ActionsLayout } from '@ui/ActionsLayout';
import { getRandomIntInclusive } from '@utils/getRandomIntInclusive';
import { capitalise } from '@utils/capitalise';

import { AreaMap } from '../AreaMap';
import { AbstractLocation } from '../AbstractLocation';

import { map, mapSize, additionalMapInfo } from './map';
import { descriptions } from '../LocationDescriptions';

export const RUIN_LOCATION_ACTIONS = {
  PLAYER_DIED: 'onPlayerDied',
} as const;

const ACTIONS = {
  LOOK_AROUND: '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
  STAND_UP: '–í—Å—Ç–∞—Ç—å',
  LOOK_AT_YOURSELF: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É',
} as const;

type ACTION_VALUES = typeof ACTIONS[keyof typeof ACTIONS];

const MOVE_ACTIONS = {
  TO_WEST: 'üë£ ‚¨ÖÔ∏è',
  TO_EAST: 'üë£ ‚û°Ô∏è',
  TO_NORTH: 'üë£ ‚¨ÜÔ∏è',
  TO_SOUTH: 'üë£ ‚¨áÔ∏è',
  NO_WAY: 'üö∑',
} as const;

type MOVE_ACTION_VALUES = typeof MOVE_ACTIONS[keyof typeof MOVE_ACTIONS];

const MOVE_DIRECTIONS = {
  WEST: '–ó–∞–ø–∞–¥',
  EAST: '–í–æ—Å—Ç–æ–∫',
  NORTH: '–°–µ–≤–µ—Ä',
  SOUTH: '–Æ–≥',
} as const;

const SITUATIONAL_ACTIONS = {
  EXAMINE_CORPSE: 'üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø',
  TALK_WITH_MERCHANT: 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º',
  PICK_UP_GOLD: 'üí∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ',

} as const;

type SITUATIONAL_ACTION_VALUES = typeof SITUATIONAL_ACTIONS[keyof typeof SITUATIONAL_ACTIONS];

export class RuinLocation extends AbstractLocation {
  private createBattle(
    player: AbstractActor,
    enemies: AbstractActor[],
    nextInteraction: AbstractInteraction,
  ): BattleInteraction {
    const battle = new BattleInteraction({ ui: this.ui, player, enemies });
    const onDiedInteraction = this.actions.getInteractionByAction('onDied');
    if (onDiedInteraction != null) battle.addAction(BATTLE_FINAL_ACTIONS.PLAYER_DIED, onDiedInteraction);
    battle.addAction(BATTLE_FINAL_ACTIONS.PLAYER_WIN, nextInteraction);
    return battle;
  }

  private async doBattle(player: AbstractActor, enemies: AbstractActor[]): Promise<boolean> {
    const battle = new BattleInteraction({ ui: this.ui, player, enemies });
    const onDiedInteraction = this.actions.getInteractionByAction('onDied');
    if (onDiedInteraction != null) battle.addAction(BATTLE_FINAL_ACTIONS.PLAYER_DIED, onDiedInteraction);
    await battle.interact();

    return player.isAlive;
  }

  private async printFAQ(): Promise<void> {
    await this.ui.sendToUser(''
      + '*** –û–±—â–µ–µ ***\n'
      + 'üí¨ [–∫—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç]: - –¥–∏–∞–ª–æ–≥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞\n'
      + '‚öôÔ∏è {...} - —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
      + 'üìÄ - –ó–æ–ª–æ—Ç–æ\n'
      + 'üíø - –°–µ—Ä–µ–±—Ä–æ\n'
      + '\n*** –ö–∞—Ä—Ç–∞ ***\n'
      + '‚¨õÔ∏è - –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–µ –º–µ—Å—Ç–æ\n'
      + 'üü´ - wall, —Å—Ç–µ–Ω–∞, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n'
      + 'üü™ - break, –æ–±—Ä—ã–≤, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n'
      + '‚¨úÔ∏è - —á–∏—Å—Ç–æ–µ –º–µ—Å—Ç–æ\n'
      + 'üîµ - merchant, —Ç–æ—Ä–≥–æ–≤–µ—Ü\n'
      + 'üîπ - player, –∏–≥—Ä–æ–∫\n'
      + 'üü• - out, –≤—ã—Ö–æ–¥\n'
      + 'üî∏ - gold, –∑–æ–ª–æ—Ç–æ\n'
      + '‚ùî - –Ω–µ —Ä–∞–∑–≤–µ–¥–∞–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n'
      + '‚¨ÜÔ∏è - N (–°–µ–≤–µ—Ä)\n'
      + '‚û°Ô∏è - E (–í–æ—Å—Ç–æ–∫)\n'
      + '‚¨áÔ∏è - S (–Æ–≥)\n'
      + '‚¨ÖÔ∏è - W (–ó–∞–ø–∞–¥)\n');
  }

  private async printAmbientDescription(ruinAreaMap: AreaMap) {
    const ambiences = ruinAreaMap.countAroundAmbiences();
    const ambientDescriptions = (Object.keys(ambiences) as Array<keyof typeof ambiences>)
      .reduce<string[]>((acc, key) => {
      if (ambiences[key] > 0) {
        return [...acc, ...descriptions[key]];
      }
      return acc;
    },
    []);
    ambientDescriptions.push(...descriptions.default);
    await this.ui.sendToUser(ambientDescriptions[getRandomIntInclusive(0, ambientDescriptions.length - 1)], true);
  }

  private printEquipment(player: Player): string {
    const equipment = [];
    if (player.wearingEquipment.body != null) equipment.push(`  ${capitalise(player.wearingEquipment.body.name)}`);
    if (player.wearingEquipment.legs != null) equipment.push(`  ${capitalise(player.wearingEquipment.legs.name)}`);

    return equipment.join('\n');
  }

  private async lookYourself(): Promise<void> {
    const player = this.state.player as Player;

    await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ –≤—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å—Å—è –≤ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ.`);
    const { stats } = player;
    // TODO: –°–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–µ—â–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!
    await this.ui.sendToUser(`${`${player.getType({ declension: 'possessive', capitalised: true })} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`
      + `  –û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è(‚ù§Ô∏è) - ${stats.healthPoints} / ${stats.maxHealthPoints}\n`
      + `  –ó–∞—â–∏—Ç–∞(üõ°) - ${stats.armor}\n`
      + `  –°–∏–ª–∞ —É–¥–∞—Ä–∞(üó°) - ${stats.attackDamage}\n`
      + `  –®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —É–¥–∞—Ä–æ–º(üéØ) - ${stats.accuracy}\n`
      + `  –®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —É—è–∑–≤–∏–º–æ–µ –º–µ—Å—Ç–æ(‚ÄºÔ∏è) - ${stats.criticalChance}\n`
      + `  –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞(‚úñÔ∏è) - ${stats.criticalDamageModifier}\n`
      + `  –í –∫–∞—Ä–º–∞–Ω–µ –∑–≤–µ–Ω—è—Ç(üí∞) ${player.gold} –∑–æ–ª–æ—Ç–∞\n`
      + `\n–ù–∞ ${player.getType({ declension: 'dative' })} –Ω–∞–¥–µ—Ç—ã:\n`}${this.printEquipment(player)}\n`
      + `–û—Ä—É–∂–∏–µ - ${player.wearingEquipment.rightHand?.name ?? '–Ω–∏—á–µ–≥–æ'}.\n`);
  }

  public async activate(): Promise<string> {
    const ruinAreaMap = new AreaMap(map, mapSize, additionalMapInfo);

    const player = this.state.player as Player;

    const nullInteraction = new Interaction({ ui: this.ui, async activate() { return null; } });

    const gameMenu = await this.ui.showPersistentActions(
      '–ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é',
      new ActionsLayout({ columns: 4 }).addRow('‚ùì', '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ—Ä—Ç–∞—Ä—å'),
      (action) => {
        if (action === '‚ùì') void this.printFAQ();
        else if (action === '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ—Ä—Ç–∞—Ä—å') console.log('Inventory open');
        else if (action === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É') void this.lookYourself();
      },
    );

    this.state.persistActionsContainers.push(gameMenu);

    await this.ui.sendToUser(`–ü—Ä–∏–≤–µ—Ç ${this.state.additionalInfo.playerName}.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –æ—á–Ω—É–ª—Å—è –ø–æ—Å—Ä–µ–¥–∏ —Ä—É–∏–Ω.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –Ω–µ –∑–Ω–∞–µ—à—å –∫—Ç–æ —Ç—ã, –≥–¥–µ —Ç—ã, –∑–∞—á–µ–º —Ç—ã –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n`);

    const isTrue = true;

    const actions: Set<ACTION_VALUES> = new Set([ACTIONS.LOOK_AROUND, ACTIONS.STAND_UP]);
    const localActions: Set<SITUATIONAL_ACTION_VALUES> = new Set();
    let moveActions: MOVE_ACTION_VALUES[] = [];

    const internalPlayerState = {
      isStandUp: false,
      seeRatCorpse: async () => { /* pass */ },
    };

    while (isTrue) {
      const choosedAction = await this.ui.interactWithUser(
        new ActionsLayout<ACTION_VALUES | MOVE_ACTION_VALUES | SITUATIONAL_ACTION_VALUES>({ columns: 4 })
          .addRow(...actions)
          .addRow(...localActions)
          .addRow(...moveActions),
        (action) => action !== MOVE_ACTIONS.NO_WAY,
      );
      if (choosedAction === ACTIONS.LOOK_AROUND && !internalPlayerState.isStandUp) {
        await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –æ–≥–ª—è–¥—ã–≤–∞–µ—à—å—Å—è –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º.`);
        await this.ui.sendToUser('–°—É–º—Ä–∞—á–Ω–æ.'
          + ` ${player.getType({ declension: 'nominative', capitalised: true })} —Å–∏–¥–∏—à—å –æ–ø—ë—Ä—à–∏—Å—å –Ω–∞ —É—Ü–µ–ª–µ–≤—à–∏–π —É–≥–æ–ª —Å—Ç–µ–Ω—ã.`
          + ` –ù–∞–¥ ${player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∫—Ä—ã—à–∏. –†—è–¥–æ–º –ø–æ—á—Ç–∏ –ø–æ—Ç—É—Ö—à–∏–π –∫–æ—Å—Ç–µ—Ä.`
          + ' –ü–æ–æ–¥–∞–ª—å –≤–µ–∑–¥–µ –≥—Ä—è–∑—å –∏ –ª—É–∂–∏. –ú–æ—Ä–æ—Å–∏—Ç –º–µ–ª–∫–∏–π –¥–æ–∂–¥–∏–∫.\n');
        await gameMenu.updateKeyboard(new ActionsLayout({ columns: 4 })
          .addRow('‚ùì', '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ—Ä—Ç–∞—Ä—å')
          .addRow('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É'));
        await this.ui.sendToUser('‚öôÔ∏è {–í –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ}');
        actions.delete(ACTIONS.LOOK_AROUND);
      } else if (choosedAction === ACTIONS.STAND_UP) {
        await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—Å—Ç–∞–µ—à—å –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å—Ç–µ–Ω—É. –í—Å–µ —Ç–µ–ª–æ –±–æ–ª–∏—Ç –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è.`);
        internalPlayerState.isStandUp = true;
        actions.delete(ACTIONS.STAND_UP);
        actions.delete(ACTIONS.LOOK_AROUND);
      } else if (choosedAction.startsWith('–ò–¥—Ç–∏ –Ω–∞') || choosedAction.startsWith('üë£')) { // @TODO:
        let direction: keyof typeof MOVE_DIRECTIONS = 'WEST';
        if (choosedAction === MOVE_ACTIONS.TO_WEST) direction = 'WEST';
        else if (choosedAction === MOVE_ACTIONS.TO_EAST) direction = 'EAST';
        else if (choosedAction === MOVE_ACTIONS.TO_NORTH) direction = 'NORTH';
        else if (choosedAction === MOVE_ACTIONS.TO_SOUTH) direction = 'SOUTH';
        await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∏–¥–µ—à—å –Ω–∞ ${MOVE_DIRECTIONS[direction]}.`);
        ruinAreaMap.move(direction);
        ruinAreaMap.lookAround();
        await this.printAmbientDescription(ruinAreaMap);
        await this.ui.sendToUser(`–û—Å–º–∞—Ç—Ä–∏–≤–∞—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è, ${player.getType({ declension: 'nominative' })} –≤–∏–¥–∏—à—å`);
        await this.ui.sendToUser(ruinAreaMap.printMap());

        localActions.clear();

        const { currentSpot } = ruinAreaMap;

        if (currentSpot == null) {
          console.error('Oops, something went wrong!');
        } else if (currentSpot.type === 'EVENT') {
          // const info = ruinAreaMap.currentSpot?.additionalInfo;
          if (currentSpot.icon === 'E1') {
            await this.ui.sendToUser(`–í–Ω–µ–∑–∞–ø–Ω–æ, ${player.getType({ declension: 'nominative' })} —Å–ø–æ—Ç—ã–∫–∞–µ—à—å—Å—è –æ —Ç—Ä—É–ø –∫—Ä—ã—Å—ã.`);
            localActions.add(SITUATIONAL_ACTIONS.EXAMINE_CORPSE);
            // TODO: It's Interaction????
            internalPlayerState.seeRatCorpse = async () => {
              await this.ui.sendToUser(
                '–ö—Ä—ã—Å–∞, –∫–∞–∫ –∫—Ä—ã—Å–∞. –ù–æ –≤ –±–æ–∫—É —É –Ω–µ–µ —Ç–æ—Ä—á–∏—Ç –Ω–æ–∂. –û, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —á–µ–º –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–∏—Ö —Ç–≤–∞—Ä–µ–π!',
              ); '';
              player.equipWeapon(new KnifeWeapon('LEGENDARY'));
            };
          }
        } else if (currentSpot.type === 'MERCHANT') {
          await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –≤–∏–¥–∏—à—å —Ç–æ—Ä–≥–æ–≤—Ü–∞.`);
          localActions.add(SITUATIONAL_ACTIONS.TALK_WITH_MERCHANT);
        } else if (currentSpot.type === 'VERY_EASY_BATTLE') {
          const enemies = [new Rat({ typePostfix: '‚Ññ1' })];

          if (!(await this.doBattle(player, enemies))) return RUIN_LOCATION_ACTIONS.PLAYER_DIED;

          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          await this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.');
        } else if (currentSpot.type === 'EASY_BATTLE') {
          const enemies = [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' })];

          if (!(await this.doBattle(player, enemies))) return RUIN_LOCATION_ACTIONS.PLAYER_DIED;

          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          await this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.');
        } else if (currentSpot.type === 'MEDIUM_BATTLE') {
          const enemies = [
            new Rat({ typePostfix: '‚Ññ1' }),
            new Rat({ typePostfix: '‚Ññ2' }),
            new Rat({ typePostfix: '‚Ññ3' }),
          ];

          if (!(await this.doBattle(player, enemies))) return RUIN_LOCATION_ACTIONS.PLAYER_DIED;

          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          await this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.');
        } else if (currentSpot.type === 'HARD_BATTLE') {
          const enemies = [
            new Rat({ typePostfix: '‚Ññ1' }),
            new Rat({ typePostfix: '‚Ññ2' }),
            new Rat({ typePostfix: '‚Ññ3' }),
            new Skeleton({ typePostfix: '‚Ññ1' }),
            new Skeleton({ typePostfix: '‚Ññ2' }),
          ];

          if (!(await this.doBattle(player, enemies))) return RUIN_LOCATION_ACTIONS.PLAYER_DIED;

          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          await this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.');
        } else if (currentSpot.type === 'VERY_HARD_BATTLE') {
          const enemies = [
            new Skeleton({ typePostfix: '‚Ññ1' }),
            new Skeleton({ typePostfix: '‚Ññ2' }),
            new Skeleton({ typePostfix: '‚Ññ3' }),
            new Skeleton({ typePostfix: '‚Ññ4' }),
            new Skeleton({ typePostfix: '‚Ññ5' }),
          ];

          if (!(await this.doBattle(player, enemies))) return RUIN_LOCATION_ACTIONS.PLAYER_DIED;

          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          await this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.');
        } else if (currentSpot.type === 'GOLD') {
          await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∑–∞–º–µ—á–∞–µ—à—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –ø–æ–¥ –Ω–æ–≥–∞–º–∏.`);
          localActions.add(SITUATIONAL_ACTIONS.PICK_UP_GOLD);
        } else if (currentSpot.type === 'EXIT') {
          await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∏–¥–µ—à—å –ø–æ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ—Ä–∏–¥–æ—Ä—É –∏–∑ –æ–±–ª–æ–º–∫–æ–≤ —Å—Ç–µ–Ω.\n`
            + '–ü–æ –º–µ—Ä–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥, –≤–æ–∑–¥—É—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∏—â–µ –∏ —Å–≤–µ–∂–µ–µ.\n'
            + `–ü–æ—Ö–æ–∂–µ, ${player.getType({ declension: 'nominative' })} –≤—ã–±—Ä–∞–ª—Å—è...\n`
            + `–ï—â–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, ${player.getType({ declension: 'nominative' })} –≤–∏–¥–∏—à—å –∫–æ–Ω–µ—Ü –∫–æ—Ä–∏–¥–æ—Ä–∞ –∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–æ–≤–æ–∑–∫–æ–π –≤–æ–∑–ª–µ –Ω–µ–≥–æ.`,
          true);
          break;
        }
      } else if (choosedAction === SITUATIONAL_ACTIONS.TALK_WITH_MERCHANT) {
        const merchantGoods = new Set([
          {
            name: 'healthPoitions',
            message: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è = 10 –∑–æ–ª–æ—Ç—ã—Ö (üìÄ)',
            action: '–ö—É–ø–∏—Ç—å –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è',
            price: 10,
          },
        ]);

        let interaction: AbstractInteraction = new MerchantNPC({
          ui: this.ui,
          player,
          goods: merchantGoods,
        });

        interaction.addAutoAction(nullInteraction);

        while (isTrue) {
          const nextInteraction: AbstractInteraction | null = await interaction.interact();
          if (nextInteraction == null) break;

          interaction = nextInteraction;
        }
      } else if (choosedAction === SITUATIONAL_ACTIONS.PICK_UP_GOLD) {
        const reward = getRandomIntInclusive(1, 10);
        localActions.delete(SITUATIONAL_ACTIONS.PICK_UP_GOLD);
        ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
        player.collectReward({ gold: reward });
        await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –ø–æ–¥–±–∏—Ä–∞–µ—à—å ${reward} –∑–æ–ª–æ—Ç–∞.`);
      } else if (choosedAction === SITUATIONAL_ACTIONS.EXAMINE_CORPSE) {
        await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å —Ç—Ä—É–ø –∫—Ä—ã—Å—ã.`);
        localActions.delete(SITUATIONAL_ACTIONS.EXAMINE_CORPSE);
        ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
        await internalPlayerState.seeRatCorpse();
      }

      if (internalPlayerState.isStandUp) {
        moveActions = [];

        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x - 1, y: ruinAreaMap.playerPosition.y })) {
          moveActions.push(MOVE_ACTIONS.TO_WEST);
        } else moveActions.push(MOVE_ACTIONS.NO_WAY);

        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x, y: ruinAreaMap.playerPosition.y - 1 })) {
          moveActions.push(MOVE_ACTIONS.TO_NORTH);
        } else moveActions.push(MOVE_ACTIONS.NO_WAY);

        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x + 1, y: ruinAreaMap.playerPosition.y })) {
          moveActions.push(MOVE_ACTIONS.TO_EAST);
        } else moveActions.push(MOVE_ACTIONS.NO_WAY);

        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x, y: ruinAreaMap.playerPosition.y + 1 })) {
          moveActions.push(MOVE_ACTIONS.TO_SOUTH);
        } else moveActions.push(MOVE_ACTIONS.NO_WAY);
      }
    }

    return super.activate('–ö—É–¥–∞ —Ç–µ–ø–µ—Ä—å?');
  }
}
