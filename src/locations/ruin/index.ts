import { Rat } from "../../actors/Rat";
import { AbstractInteraction, Interactable } from "../../interactions/AbstractInteraction";
import { BattleInteraction } from "../../interactions/BattleInteraction";
import { Interaction } from "../../interactions/Interaction";
import { NextLocation, getBaseInteractions } from "../../interactions/scenario";
import { SimpleInteraction } from "../../interactions/SimpleInteraction";
import { SessionState } from "../../SessionState";
import { AbstractUI } from "../../ui/AbstractUI";
import { Point, Size } from "../../utils/@types";
import { isPresent } from "../../utils/check";

import { map, mapObjects, mapSize } from './map';

export interface AbstractLocationOptions {
  ui: AbstractUI;
  state: SessionState;
  nextLocation?: AbstractLocation;
}

export abstract class AbstractLocation implements Interactable {
  protected ui: AbstractUI;
  protected state: SessionState;

  constructor(options: AbstractLocationOptions) {
    this.ui = options.ui;
    this.state = options.state;
  }

  public abstract activate(): Promise<AbstractInteraction | null>;
}

const mapSigns: Record<mapObjects, string> = {
  '-': '‚¨õÔ∏è',
  'w': 'üü´',
  'b': 'üü™',
  '0': '‚¨úÔ∏è',
  'm': 'üîµ',
  'p': 'üîπ',
  'o': 'üü•',
  'g': 'üí∞',
  '?': '‚ùî',
  '1': '1',
  '2': '2',
  '3': '3',
  '4': '4',
  '5': '5',
} as const;

export class RuinLocation extends AbstractLocation {
  private printMap(currentPosition: Point, userVisibleMap: mapObjects[], mapSize: Size): string {
    // üü•üüßüü®üü©üü¶ üü™‚¨õÔ∏è‚¨úÔ∏èüü´
    // üî¥üü†üü°üü¢üîµüü£‚ö´Ô∏è‚ö™Ô∏èüü§
    // üî∏üîπüî∂üî∑‚ô¶Ô∏è
    // üö™ üí∞
    let mapPiece = '';
    mapPiece += '‚¨õÔ∏è - –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–µ –º–µ—Å—Ç–æ\n';
    mapPiece += 'üü´ - wall, —Å—Ç–µ–Ω–∞, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n';
    mapPiece += 'üü™ - break, –æ–±—Ä—ã–≤, –Ω–µ—Ç –ø—Ä–æ—Ö–æ–¥–∞\n';
    mapPiece += '‚¨úÔ∏è - —á–∏—Å—Ç–æ–µ –º–µ—Å—Ç–æ\n';
    mapPiece += 'üîµ - merchant, —Ç–æ—Ä–≥–æ–≤–µ—Ü\n';
    mapPiece += 'üîπ - player, –∏–≥—Ä–æ–∫\n';
    mapPiece += 'üü• - out, –≤—ã—Ö–æ–¥\n';
    mapPiece += 'üî∏ - gold, –∑–æ–ª–æ—Ç–æ\n';
    mapPiece += '‚ùî - –Ω–µ —Ä–∞–∑–≤–µ–¥–∞–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n';
    mapPiece += '‚¨ÜÔ∏è - N (–°–µ–≤–µ—Ä)\n';
    mapPiece += '‚û°Ô∏è - E (–í–æ—Å—Ç–æ–∫)\n';
    mapPiece += '‚¨áÔ∏è - S (–Æ–≥)\n';
    mapPiece += '‚¨ÖÔ∏è - W (–ó–∞–ø–∞–¥)\n';
    mapPiece += '\n';
    for (let y = currentPosition.y - 1; y <= currentPosition.y + 1; y += 1) {
      mapPiece += '';
      if (y < 0 || y > mapSize.height - 1) continue;
      for (let x = currentPosition.x - 1; x <= currentPosition.x + 1; x += 1) {
        if (x < 0 || x > mapSize.width - 1) continue;
        const cell = userVisibleMap[y * mapSize.width + x];
        if (y === currentPosition.y && x === currentPosition.x) mapPiece += 'üîπ';
        else if (cell === 'p') mapPiece += '‚¨úÔ∏è';
        else mapPiece += mapSigns[cell];
      }
      mapPiece += '\n';
    }
    return mapPiece;
  }

  public async activate(): Promise<AbstractInteraction | null> {

    const player = this.state.player;

    await this.ui.sendToUser(`–ü—Ä–∏–≤–µ—Ç ${this.state.additionalInfo.playerName}.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –æ—á–Ω—É–ª—Å—è –ø–æ—Å—Ä–µ–¥–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ä—É–∏–Ω.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –Ω–µ –∑–Ω–∞–µ—à—å –∫—Ç–æ —Ç—ã, –∑–∞—á–µ–º —Ç—ã –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n`,
      'default',
    );

    const isTrue = true;

    const currentPosition = { x: 0, y: 0 };
    const userPositionIndex = map.indexOf('p');
    currentPosition.y = Math.ceil(userPositionIndex / mapSize.width);
    currentPosition.x = userPositionIndex - currentPosition.y * mapSize.width;

    const userVisibleMap = map.map<mapObjects>(() => '?');

    const options: string[] = ['–û–≥–ª—è–¥–µ—Ç—Å—è', '–í—Å—Ç–∞—Ç—å'];
    let walkOptions: string[] = [];

    const internalPlayerState = {
      isStandUp: false,
    };

    // '–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–†';
    // '–ò–¥—Ç–∏ –Ω–∞ –Æ–ì';
    // '–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î';
    // '–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö';


    while (isTrue) {
      // await this.ui.sendToUser(`–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n`, 'default');

      const option = await this.ui.interactWithUser('–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?', options.concat(walkOptions));
      if (option === '–û–≥–ª—è–¥–µ—Ç—Å—è' && !internalPlayerState.isStandUp) {
        options.push('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É');
        await this.ui.sendToUser(`–°—É–º—Ä–∞—á–Ω–æ.`
          + ` ${player.getType({ declension: 'nominative', capitalised: true })} —Å–∏–¥–∏—à—å –æ–ø—ë—Ä—à–∏—Å—å –Ω–∞ —É—Ü–µ–ª–µ–≤—à–∏–π —É–≥–æ–ª —Å—Ç–µ–Ω—ã.`
          + ` –ù–∞–¥ ${player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∫—Ä—ã—à–∏. –†—è–¥–æ–º –ø–æ—á—Ç–∏ –ø–æ—Ç—É—Ö—à–∏–π –∫–æ—Å—Ç–µ—Ä.`
          + ` –ü–æ–æ–¥–∞–ª—å –≤–µ–∑–¥–µ –≥—Ä—è–∑—å –∏ –ª—É–∂–∏. –ú–æ—Ä–æ—Å–∏—Ç –º–µ–ª–∫–∏–π –¥–æ–∂–¥–∏–∫.\n`,
          'default',
        );
      } else if (option === '–û–≥–ª—è–¥–µ—Ç—Å—è' && internalPlayerState.isStandUp) {
        await this.ui.sendToUser(this.printMap(currentPosition, userVisibleMap, mapSize), 'default');
      } else if (option === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É') {
        const stats = player.stats;
        this.ui.sendToUser(`${player.getType({ declension: 'possessive', capitalised: true })} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`
          + `–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è - ${stats.healthPoints} / ${stats.maxHealthPoints}\n`
          + `–ó–∞—â–∏—Ç–∞ - ${stats.armor}\n`
          + `–°–∏–ª–∞ —É–¥–∞—Ä–∞ - ${stats.attackDamage}\n`
          + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —É–¥–∞—Ä–æ–º - ${stats.accuracy}\n`
          + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —É—è–∑–≤–∏–º–æ–µ –º–µ—Å—Ç–æ - ${stats.criticalChance}\n`
          + `–í –∫–∞—Ä–º–∞–Ω–µ –∑–≤–µ–Ω—è—Ç ${player.gold} –∑–æ–ª–æ—Ç–∞\n`,
          'default',
        );
      } else if (option === '–í—Å—Ç–∞—Ç—å') {
        internalPlayerState.isStandUp = true;
        options.splice(options.indexOf('–í—Å—Ç–∞—Ç—å'), 1);
      } else if (option.startsWith('–ò–¥—Ç–∏ –Ω–∞')) {
        if (option === '–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î') {
          currentPosition.x -= 1;
        } else if (option === '–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö') {
          currentPosition.x += 1;
        } else if (option === '–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–†') {
          currentPosition.y -= 1;
        } else if (option === '–ò–¥—Ç–∏ –Ω–∞ –Æ–ì') {
          currentPosition.y += 1;
        }
        const currentPositionIndex = currentPosition.y * mapSize.width + currentPosition.x;
        for (let y = currentPosition.y - 1; y <= currentPosition.y + 1; y += 1) {
          if (y < 0 || y > mapSize.height - 1) continue;
          for (let x = currentPosition.x - 1; x <= currentPosition.x + 1; x += 1) {
            if (x < 0 || x > mapSize.width - 1) continue;
            userVisibleMap[y * mapSize.width + x] = map[y * mapSize.width + x];
          }
        }

        walkOptions = [];

        if (map[currentPositionIndex] === 'm') {
          // await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –≤–∏–¥–∏—à—å —Ç–æ—Ä–≥–æ–≤—Ü–∞.`, 'default');
          // walkOptions.push('üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º');

          // const talkToMerchantInteraction = new SimpleInteraction(ui, {
          //   message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${this.state.additionalInfo.playerName}. –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?`,
          // });

          // const buyHealthPointInteraction = new Interaction(ui, {
          //   buildMessage() { return '–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä :)' },
          //   async activate() {
          //     const result = state.player.exchangeGoldToItem(10, { healthPoitions: 1 });
          //     if (!result) ui.sendToUser(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É ${state.player.getType({ declension: 'genitive' })} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`, 'default');
          //     return 'SUPER';
          //   }
          // });

          // inputInteraction.addAction('üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', talkToMerchantInteraction);

          // talkToMerchantInteraction.addAction('–ö—É–ø–∏—Ç—å 1 –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª—Ç—ã—Ö)', buyHealthPointInteraction);
          // buyHealthPointInteraction.addAction('auto', inputInteraction);

          // outputInteraction = new Interaction(ui, {
          //   buildMessage() { return '–ò–¥–µ–º –¥–∞–ª—å—à–µ?'; },
          //   async activate() {
          //     currentPositionOnMap.row = rowIndex;
          //     currentPositionOnMap.column = columnIndex;
          //     if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
          //     return 'SUPER';
          //   },
          // });
          // inputInteraction.addAction('auto', outputInteraction);
        }
      } else if (option === 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º') {
        const merchantGoods = {
          oneHealthPoition: '–ö—É–ø–∏—Ç—å 1 –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª—Ç—ã—Ö)',
        };
        const buyOption = await this.ui.interactWithUser(
          `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${this.state.additionalInfo.playerName}. –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?`,
          [merchantGoods.oneHealthPoition],
        );
        if (buyOption === merchantGoods.oneHealthPoition) {
          const result = player.exchangeGoldToItem(10, { healthPoitions: 1 });
          if (!result) this.ui.sendToUser(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É ${player.getType({ declension: 'genitive' })} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`, 'default');
        }
      }


      if (internalPlayerState.isStandUp) {
        const currentPositionIndex = currentPosition.y * mapSize.width + currentPosition.x;
        if (currentPosition.x > 0 && !['w', 'b', '-'].includes(map[currentPositionIndex - 1])) {
          walkOptions.push('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î');
        }
        if (currentPosition.x < mapSize.width - 1 && !['w', 'b', '-'].includes(map[currentPositionIndex + 1])) {
          walkOptions.push('–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö');
        }
        if (currentPosition.y > 0 && !['w', 'b', '-'].includes(map[currentPositionIndex - mapSize.width])) {
          walkOptions.push('–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–†');
        }
        if (currentPosition.y < mapSize.height - 1 && !['w', 'b', '-'].includes(map[currentPositionIndex + mapSize.width])) {
          walkOptions.push('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì');
        }
      }
    }


    const toBeContinuedInteraction = new SimpleInteraction(this.ui, {
      message: `–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...`,
    });

    return toBeContinuedInteraction;
  }
}




export const buildThirdLocation = (ui: AbstractUI, state: SessionState, nextLocation?: NextLocation): AbstractInteraction => {
  const baseInteractions = getBaseInteractions(ui, state);


  baseInteractions.lastInteraction.removeAction('–í–°–ï! –•–í–ê–¢–ò–¢ –° –ú–ï–ù–Ø!');
  baseInteractions.lastInteraction.addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);
  if (nextLocation != null) baseInteractions.lastInteraction.addAction(nextLocation.actionMessage, nextLocation.interaction);

  const mainInteraction = new SimpleInteraction(ui, { message: `–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n` });

  const overviewInteraction = new Interaction(ui, {
    buildMessage() {
      return `–°—É–º—Ä–∞—á–Ω–æ.`
        + ` ${state.player.getType({ declension: 'nominative', capitalised: true })} —Å–∏–¥–∏—à—å –æ–ø—ë—Ä—à–∏—Å—å –Ω–∞ —É—Ü–µ–ª–µ–≤—à–∏–π —É–≥–æ–ª —Å—Ç–µ–Ω—ã.`
        + ` –ù–∞–¥ ${state.player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∫—Ä—ã—à–∏. –†—è–¥–æ–º –ø–æ—á—Ç–∏ –ø–æ—Ç—É—Ö—à–∏–π –∫–æ—Å—Ç–µ—Ä.`
        + ` –ü–æ–æ–¥–∞–ª—å –≤–µ–∑–¥–µ –≥—Ä—è–∑—å –∏ –ª—É–∂–∏. –ú–æ—Ä–æ—Å–∏—Ç –º–µ–ª–∫–∏–π –¥–æ–∂–¥–∏–∫.\n`;
    },
    async activate() {
      mainInteraction.addAction('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É', seeMyselfInteraction);
      return 'SUPER';
    }
  });

  const seeMyselfInteraction = new Interaction(ui, {
    buildMessage() {
      const stats = state.player.stats;
      return `${state.player.getType({ declension: 'possessive', capitalised: true })} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`
        + `–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è - ${stats.healthPoints} / ${stats.maxHealthPoints}\n`
        + `–ó–∞—â–∏—Ç–∞ - ${stats.armor}\n`
        + `–°–∏–ª–∞ —É–¥–∞—Ä–∞ - ${stats.attackDamage}\n`
        + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —É–¥–∞—Ä–æ–º - ${stats.accuracy}\n`
        + `–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —É—è–∑–≤–∏–º–æ–µ –º–µ—Å—Ç–æ - ${stats.criticalChance}\n`
        + `–í –∫–∞—Ä–º–∞–Ω–µ –∑–≤–µ–Ω—è—Ç ${state.player.gold} –∑–æ–ª–æ—Ç–∞\n`
        ;
    },
  });

  const currentPositionOnMap = {
    row: 4,
    column: 1,
  };

  const interactiveMap: Map<string, AbstractInteraction> = new Map();
  let userPositionInteraction: AbstractInteraction | null = null;

  for (let rowIndex = 0; rowIndex < 11; rowIndex += 1) {
    for (let columnIndex = 0; columnIndex < 18; columnIndex += 1) {
      const cell = map[rowIndex * 18 + columnIndex];
      let inputInteraction: AbstractInteraction | null = null;
      let outputInteraction: AbstractInteraction | null = null;
      if (cell === '0') {
        inputInteraction = new SimpleInteraction(ui, { message: '–¢—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.' });
        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);
      }
      if (cell === '1' || cell === '2' || cell === '3') {
        const internalInteraction = new SimpleInteraction(ui, { message: '–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.' });
        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        internalInteraction.addAction('auto', outputInteraction);
        inputInteraction = new BattleInteraction(ui, { player: state.player, enemies: Array.from(Array(Number(cell)), (_, index) => new Rat({ typePostfix: `‚Ññ${index + 1}` })) });
        inputInteraction.addAction('onWin', internalInteraction);
        inputInteraction.addAction('onDied', baseInteractions.lastInteraction);
      }
      if (cell === 'm') {
        const talkToMerchantInteraction = new SimpleInteraction(ui, {
          message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${state.additionalInfo.playerName}. –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?`,
        });

        const buyHealthPointInteraction = new Interaction(ui, {
          buildMessage() { return '–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä :)' },
          async activate() {
            const result = state.player.exchangeGoldToItem(10, { healthPoitions: 1 });
            if (!result) ui.sendToUser(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É ${state.player.getType({ declension: 'genitive' })} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`, 'default');
            return 'SUPER';
          }
        });

        inputInteraction = new SimpleInteraction(ui, {
          message: `${state.player.getType({ declension: 'nominative', capitalised: true })} –≤–∏–¥–∏—à—å —Ç–æ—Ä–≥–æ–≤—Ü–∞.`,
        });

        inputInteraction.addAction('üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', talkToMerchantInteraction);

        talkToMerchantInteraction.addAction('–ö—É–ø–∏—Ç—å 1 –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª—Ç—ã—Ö)', buyHealthPointInteraction);
        buyHealthPointInteraction.addAction('auto', inputInteraction);

        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ò–¥–µ–º –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);
      }
      if (cell === 'o') {
        inputInteraction = new SimpleInteraction(ui, {
          message: `${state.player.getType({ declension: 'nominative', capitalised: true })} –¥–æ–±—Ä–∞–ª—Å—è –¥–æ –≤—ã—Ö–æ–¥–∞! –ú–û–õ–û–î–ï–¶!!!`,
        });

        inputInteraction.addAction('auto', baseInteractions.lastInteraction);

        outputInteraction = inputInteraction;
      }
      if (cell === 'p') {
        inputInteraction = new SimpleInteraction(ui, {
          message: `–ü–µ—Ä–µ–¥ ${state.player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –≤—ã–±–æ—Ä –∫—É–¥–∞ –∏–¥—Ç–∏\n`,
        });

        outputInteraction = new Interaction(ui, {
          buildMessage() { return '–ö—É–¥–∞ –¥–∞–ª—å—à–µ?'; },
          async activate() {
            currentPositionOnMap.row = rowIndex;
            currentPositionOnMap.column = columnIndex;
            if (isPresent(outputInteraction)) showMapInteraction.addAction('auto', outputInteraction);
            return 'SUPER';
          },
        });
        inputInteraction.addAction('auto', outputInteraction);

        userPositionInteraction = inputInteraction;
      }

      if (isPresent(inputInteraction) && isPresent(outputInteraction)) {
        outputInteraction.addAction('–û–≥–ª—è–¥–µ—Ç—Å—è', showMapInteraction);
        interactiveMap.set(`${rowIndex}:${columnIndex}`, inputInteraction);
        interactiveMap.set(`${rowIndex}:${columnIndex}=o`, outputInteraction);
        const NInteraction = interactiveMap.get(`${rowIndex - 1}:${columnIndex}`);
        const NInteractionOutput = interactiveMap.get(`${rowIndex - 1}:${columnIndex}=o`);
        if (isPresent(NInteraction)) {
          if (isPresent(NInteractionOutput)) NInteractionOutput.addAction('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì', inputInteraction);
          else NInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì', inputInteraction);
          outputInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–†', NInteraction);
        }
        const WInteraction = interactiveMap.get(`${rowIndex}:${columnIndex - 1}`);
        const WInteractionOutput = interactiveMap.get(`${rowIndex}:${columnIndex - 1}=o`);
        if (isPresent(WInteraction)) {
          if (isPresent(WInteractionOutput)) WInteractionOutput.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          else WInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          WInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î', inputInteraction);
          outputInteraction.addAction('–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö', WInteraction);
        }
      }
    }
  }

  // const standUpInteraction = new SimpleInteraction(ui, { message: `–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç—Ä–∏ –ø—É—Ç–∏. –ö—É–¥–∞ –ø–æ–π–¥–µ—à—å?\n` });

  // const goForwardInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ø–µ—Ä–µ–¥.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.5) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });
  // const goLeftInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ª–µ–≤–æ.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.2) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });
  // const goRightInteraction = new Interaction(ui, {
  //   buildMessage() {
  //     return `–¢—ã –∏–¥–µ—à—å –≤–ø—Ä–∞–≤–æ.`;
  //   },
  //   async activate() {
  //     if (Math.random() > 0.8) {
  //       const battleInteraction = new BattleInteraction(ui, { player: state.player, enemies: [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' }), new Rat({ typePostfix: '‚Ññ3' })] });
  //       battleInteraction.addAction('onWin', standUpInteraction);
  //       battleInteraction.addAction('onDied', baseInteractions.lastInteraction);
  //       return battleInteraction;
  //     }
  //     return standUpInteraction;
  //   }
  // });

  introInteraction.addAction('auto', mainInteraction);
  mainInteraction.addAction('–û–≥–ª—è–¥–µ—Ç—Å—è', overviewInteraction);
  if (isPresent(userPositionInteraction)) mainInteraction.addAction('–í—Å—Ç–∞—Ç—å', userPositionInteraction);
  mainInteraction.addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);
  overviewInteraction.addAction('auto', mainInteraction);
  seeMyselfInteraction.addAction('auto', mainInteraction);

  // standUpInteraction
  //   .addAction('–ü–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ', goLeftInteraction)
  //   .addAction('–ü–æ–π—Ç–∏ –ø—Ä—è–º–æ', goForwardInteraction)
  //   .addAction('–ü–æ–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–æ', goRightInteraction)
  //   .addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);

  return introInteraction;
};