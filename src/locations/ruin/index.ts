import { Rat } from "../../actors/Rat";
import { AbstractInteraction } from "../../interactions/AbstractInteraction";
import { BattleInteraction } from "../../interactions/BattleInteraction";
import { getBaseInteractions } from "../../scenario";
import { SimpleInteraction } from "../../interactions/SimpleInteraction";
import { getRandomIntInclusive } from "../../utils/getRandomIntInclusive";
import { AbstractLocation } from "../AbstractLocation";

import { map, mapSize, additionalMapInfo } from './map';
import { AreaMap } from "../AreaMap";
import { KnifeWeapon } from "../../actors/weapon";
import { Player } from "../../actors/Player";

const ruinAreaMap = new AreaMap(map, mapSize, additionalMapInfo);

export class RuinLocation extends AbstractLocation {
  public async activate(): Promise<AbstractInteraction | null> {

    const player = this.state.player as Player;

    await this.ui.sendToUser(`–ü—Ä–∏–≤–µ—Ç ${this.state.additionalInfo.playerName}.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –æ—á–Ω—É–ª—Å—è –ø–æ—Å—Ä–µ–¥–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ä—É–∏–Ω.\n`
      + `${player.getType({ declension: 'nominative', capitalised: true })} –Ω–µ –∑–Ω–∞–µ—à—å –∫—Ç–æ —Ç—ã, –∑–∞—á–µ–º —Ç—ã –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n`,
      'default',
    );

    const isTrue = true;

    const actions: Set<string> = new Set(['–û–≥–ª—è–¥–µ—Ç—Å—è', '–í—Å—Ç–∞—Ç—å']);
    const localActions: Set<string> = new Set();

    const internalPlayerState = {
      isStandUp: false,
      seeRatCorpse: async () => { /* pass */ },
    };

    while (isTrue) {
      // await this.ui.sendToUser(`–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n`, 'default');

      const choosedAction = await this.ui.interactWithUser('–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?', [...actions, ...localActions]);
      if (choosedAction === '–û–≥–ª—è–¥–µ—Ç—Å—è' && !internalPlayerState.isStandUp) {
        actions.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É');
        await this.ui.sendToUser(`–°—É–º—Ä–∞—á–Ω–æ.`
          + ` ${player.getType({ declension: 'nominative', capitalised: true })} —Å–∏–¥–∏—à—å –æ–ø—ë—Ä—à–∏—Å—å –Ω–∞ —É—Ü–µ–ª–µ–≤—à–∏–π —É–≥–æ–ª —Å—Ç–µ–Ω—ã.`
          + ` –ù–∞–¥ ${player.getType({ declension: 'ablative' })} –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∫—Ä—ã—à–∏. –†—è–¥–æ–º –ø–æ—á—Ç–∏ –ø–æ—Ç—É—Ö—à–∏–π –∫–æ—Å—Ç–µ—Ä.`
          + ` –ü–æ–æ–¥–∞–ª—å –≤–µ–∑–¥–µ –≥—Ä—è–∑—å –∏ –ª—É–∂–∏. –ú–æ—Ä–æ—Å–∏—Ç –º–µ–ª–∫–∏–π –¥–æ–∂–¥–∏–∫.\n`,
          'default',
        );
      } else if (choosedAction === '–û–≥–ª—è–¥–µ—Ç—Å—è' && internalPlayerState.isStandUp) {
        ruinAreaMap.lookAround();
        await this.ui.sendToUser(ruinAreaMap.printMap(), 'default');
      } else if (choosedAction === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–µ–±—è –≤ –ª—É–∂—É') {
        const stats = player.stats;
        // TODO: –°–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–µ—â–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!
        this.ui.sendToUser(`${player.getType({ declension: 'possessive', capitalised: true })} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`
          + `  ‚ù§Ô∏è–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è - ${stats.healthPoints} / ${stats.maxHealthPoints}\n`
          + `  üõ°–ó–∞—â–∏—Ç–∞ - ${stats.armor}\n`
          + `  üó°–°–∏–ª–∞ —É–¥–∞—Ä–∞ - ${stats.attackDamage}\n`
          + `  üéØ–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —É–¥–∞—Ä–æ–º - ${stats.accuracy}\n`
          + `  ‚ÄºÔ∏è–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —É—è–∑–≤–∏–º–æ–µ –º–µ—Å—Ç–æ - ${stats.criticalChance}\n`
          + `  ‚úñÔ∏è–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ - ${stats.criticalDamageModifier}\n`
          + `  üí∞–í –∫–∞—Ä–º–∞–Ω–µ –∑–≤–µ–Ω—è—Ç ${player.gold} –∑–æ–ª–æ—Ç–∞\n`
          + `\n–ù–∞ ${player.getType({ declension: 'dative' })} –Ω–∞–¥–µ—Ç—ã:\n`
          + `  –ü–æ–Ω–æ—à–µ–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–∑ –ø–∞—Ä—É—Å–∏–Ω—ã\n`
          + `  –ü–æ–Ω–æ—à–µ–Ω—ã–µ —à—Ç–∞–Ω—ã –∏–∑ –ø–∞—Ä—É—Å–∏–Ω—ã\n`
          + `\n–í —Ä—É–∫–∞—Ö ${ player.wearingEquipment.rightHand instanceof KnifeWeapon ? '–æ–±—ã—á–Ω—ã–π –Ω–æ–∂' : '–Ω–∏—á–µ–≥–æ'}.\n`
          ,
          'default',
        );
      } else if (choosedAction === '–í—Å—Ç–∞—Ç—å') {
        internalPlayerState.isStandUp = true;
        actions.delete('–í—Å—Ç–∞—Ç—å');
      } else if (choosedAction.startsWith('–ò–¥—Ç–∏ –Ω–∞')) {

        if (choosedAction === '–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î ‚¨ÖÔ∏è') ruinAreaMap.move('WEST');
        else if (choosedAction === '–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö ‚û°Ô∏è') ruinAreaMap.move('EAST');
        else if (choosedAction === '–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–† ‚¨ÜÔ∏è') ruinAreaMap.move('NORTH');
        else if (choosedAction === '–ò–¥—Ç–∏ –Ω–∞ –Æ–ì ‚¨áÔ∏è') ruinAreaMap.move('SOUTH');

        localActions.clear();

        const currentSpot = ruinAreaMap.currentSpot;

        if (currentSpot == null) { console.error('Oops, something went wrong!'); }
        
        else if (currentSpot.type === 'BAG') {
          const info = ruinAreaMap.currentSpot?.additionalInfo;
          if (info != null && info.reward === KnifeWeapon) {
            await this.ui.sendToUser(`–í–Ω–µ–∑–∞–ø–Ω–æ, ${player.getType({ declension: 'nominative' })} —Å–ø–æ—Ç—ã–∫–∞–µ—à—å—Å—è –æ —Ç—Ä—É–ø –∫—Ä—ã—Å—ã.`, 'default');
            localActions.add('üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø');
            // TODO: It's Interaction????
            internalPlayerState.seeRatCorpse = async () => {
              await this.ui.sendToUser(
                `–ö—Ä—ã—Å–∞, –∫–∞–∫ –∫—Ä—ã—Å–∞. –ù–æ –≤ –±–æ–∫—É —É –Ω–µ–µ —Ç–æ—Ä—á–∏—Ç –Ω–æ–∂. –û, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —á–µ–º –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–∏—Ö —Ç–≤–∞—Ä–µ–π!`,
                'default',
              );
              player.equipWeapon(new KnifeWeapon());
            }
          }
        
        } else if (currentSpot.type === 'MERCHANT') {
          await this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –≤–∏–¥–∏—à—å —Ç–æ—Ä–≥–æ–≤—Ü–∞.`, 'default');
          localActions.add('üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º');
        
        } else if (currentSpot.type === 'VERY_EASY_BATTLE') {
          const enemies = [new Rat({ typePostfix: '‚Ññ1' })];
          const battle = new BattleInteraction(this.ui, { player, enemies });
          await battle.activate();
          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.', 'default');
        
        } else if (currentSpot.type === 'EASY_BATTLE') {
          const enemies = [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ1' })];
          const battle = new BattleInteraction(this.ui, { player, enemies });
          await battle.activate();
          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.', 'default');
        
        } else if (currentSpot.type === 'MEDIUM_BATTLE') {
          const enemies = [new Rat({ typePostfix: '‚Ññ1' }), new Rat({ typePostfix: '‚Ññ2' }), new Rat({ typePostfix: '‚Ññ3' })];
          const battle = new BattleInteraction(this.ui, { player, enemies });
          await battle.activate();
          ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
          this.ui.sendToUser('–ë–æ–ª—å—à–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.', 'default');
        
        } else if (currentSpot.type === 'GOLD') {
          this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∑–∞–º–µ—á–∞–µ—à—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –ø–æ–¥ –Ω–æ–≥–∞–º–∏.`, 'default');
          localActions.add('üí∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ');
        
        } else if (currentSpot.type === 'EXIT') {
          this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –∏–¥–µ—à—å –ø–æ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ—Ä—Ä–∏–¥–æ—Ä—É –∏–∑ –æ–±–æ–º–∫–æ–≤ —Å—Ç–µ–Ω.\n`
            + `–ü–æ –º–µ—Ä–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥, –≤–æ–∑–¥—É—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∏—â–µ –∏ —Å–≤–µ–∂–µ–µ.\n`
            + `–ü–æ—Ö–æ–∂–µ, ${player.getType({ declension: 'nominative' })} –≤—ã–±—Ä–∞–ª—Å—è...\n`
            + `–ï—â–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, ${player.getType({ declension: 'nominative' })} –≤–∏–¥–∏—à—å –∫–æ–Ω–µ—Ü –∫–æ—Ä—Ä–∏–¥–æ—Ä–∞ –∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–æ–≤–æ–∑–∫–æ–π –≤–æ–∑–ª–µ –Ω–µ–≥–æ.`,
            'clean',
          );
          break;
        }
      } else if (choosedAction === 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º') {
        const merchantGoods = {
          oneHealthPoition: '–ö—É–ø–∏—Ç—å 1 –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª—Ç—ã—Ö)',
        };
        const buychoosedAction = await this.ui.interactWithUser(
          `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${this.state.additionalInfo.playerName}. –ò–∑–≤–∏–Ω–∏, –∑–∞ —Å—Ç–æ–ª—å —Å–∫—É–¥–Ω—ã–π –≤—ã–±–æ—Ä.\n–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?`,
          [merchantGoods.oneHealthPoition],
        );
        if (buychoosedAction === merchantGoods.oneHealthPoition) {
          const result = player.exchangeGoldToItem(10, { healthPoitions: 1 });
          if (!result) this.ui.sendToUser(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É ${player.getType({ declension: 'genitive' })} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`, 'default');
        }

      } else if (choosedAction === 'üí∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ') {
        const reward = getRandomIntInclusive(1, 10);
        localActions.delete('üí∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ');
        ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
        player.collectReward({ gold: reward });
        this.ui.sendToUser(`${player.getType({ declension: 'nominative', capitalised: true })} –ø–æ–¥–±–∏—Ä–∞–µ—à—å ${reward} –∑–æ–ª–æ—Ç–∞.`, 'default');

      } else if (choosedAction === 'üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø') {
        localActions.delete('üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É–ø');
        ruinAreaMap.updateSpot(ruinAreaMap.playerPosition, 'CLEAN');
        await internalPlayerState.seeRatCorpse();
      }

      if (internalPlayerState.isStandUp) {
        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x - 1, y: ruinAreaMap.playerPosition.y })) {
          localActions.add('–ò–¥—Ç–∏ –Ω–∞ –ó–ê–ü–ê–î ‚¨ÖÔ∏è');
        }
        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x + 1, y: ruinAreaMap.playerPosition.y })) {
          localActions.add('–ò–¥—Ç–∏ –Ω–∞ –í–û–°–¢–û–ö ‚û°Ô∏è');
        }
        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x, y: ruinAreaMap.playerPosition.y - 1 })) {
          localActions.add('–ò–¥—Ç–∏ –Ω–∞ –°–ï–í–ï–† ‚¨ÜÔ∏è');
        }
        if (ruinAreaMap.canMove({ x: ruinAreaMap.playerPosition.x, y: ruinAreaMap.playerPosition.y + 1 })) {
          localActions.add('–ò–¥—Ç–∏ –Ω–∞ –Æ–ì ‚¨áÔ∏è');
        }
      }
    }

    const toBeContinuedInteraction = new SimpleInteraction(this.ui, {
      message: `–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...`,
    });

    const baseInteractions = getBaseInteractions(this.ui, this.state);
    toBeContinuedInteraction.addAction('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', baseInteractions.exitInteraction);
    if (this.nextLocation != null) toBeContinuedInteraction.addAction(this.nextLocation.actionMessage, this.nextLocation.interaction);

    return toBeContinuedInteraction;
  }
}
