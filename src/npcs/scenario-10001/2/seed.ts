import {
  InteractionEntity,
  NPCEntity,
} from '@db/entities';
import { NPCInteractBuilderOptions } from '@npcs/@types';

import { Quest1Phase1TakeItemClass, quest2Id, Quest2States } from '@quests/scenario-10001/2/info';

import { npc2Info } from './info';

export const npc2Seed = (options: NPCInteractBuilderOptions): void => {
  const {
    spot, baseInfo, dataCollection,
  } = options;

  const npc = dataCollection.addContainer<NPCEntity>(
    'NPC',
    {
      ...baseInfo,
      NPCId: npc2Info.id,
      subtype: npc2Info.subtype,
    },
  );

  dataCollection.addLink(spot, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: '–ù–µ–ø–æ–¥–∞–ª–µ–∫—É {{actorType player declension="nominative"}} –∑–∞–º–µ—á–∞–µ—à—å —Ä–∞–Ω–µ–Ω–æ–≥–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞.',
    condition: `{{questStateIsEQ "${quest2Id}" "${Quest2States.PRE_INITIAL}"}}`,
    operation: `{{updateQuestState "${quest2Id}" "${Quest2States.INITIAL}"}}`,
    type: 'AUTO',
    subtype: 'OTHER',
    isPrintable: true,
  });

  dataCollection.addLink(spot, {
    ...baseInfo,
    to: npc.entity.interactionId,
    text: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ù–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º',
    condition: `{{questStateIsEQ "${quest2Id}" "${Quest2States.INITIAL}"}}`,
    operation: `{{loadNPCInfo "${npc2Info.id}"}}`,
    type: 'CUSTOM',
    subtype: 'OTHER',
  });

  const i0 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: `üí¨ [${npc2Info.name}]: –≠–π, –ü—É—Ç–Ω–∏–∫! –ü–æ–º–æ–≥–∏ –º–Ω–µ...`,
  });

  options.dataCollection.addLink(npc, {
    ...baseInfo,
    to: i0.entity.interactionId,
    text: '',
    condition: `{{questStateIsEQ "${quest2Id}" "${Quest2States.INITIAL}"}}`,
    type: 'AUTO',
    subtype: 'OTHER',
  });

  const i1 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: `üí¨ [${npc2Info.name}]: –ü—Ä–æ—Ö–æ–¥—è —Ç—É—Ç, —è –Ω–∞–ø–∞—Ä–æ–ª—Å—è –Ω–∞ –±–æ–ª—å—à—É—é –∫—Ä—ã—Å—É!\n`
      + '–£ –Ω–∞—Å –±—ã–ª —Ç—è–∂–µ–ª—ã–π –±–æ–π, –∏ —è –µ–µ —É–±–∏–ª\n'
      + '–û–¥–Ω–∞–∫–æ —É–π—Ç–∏ –∏–∑ –±–æ—è —Ü–µ–ª—ã–º, —É –º–µ–Ω—è –Ω–µ –≤—ã—à–ª–æ.\n'
      + '–Ø —Ç–µ–∂–µ–ª–æ —Ä–∞–Ω–µ–Ω, –∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.'
      + '–ü—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è. –ú–Ω–µ –Ω–µ —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å.'
      + '–ê —è –≤ –¥–æ–ª–≥—É –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å!',
  });

  options.dataCollection.addLink(i0, {
    ...baseInfo,
    to: i1.entity.interactionId,
    text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?',
    type: 'CUSTOM',
    subtype: 'START_QUEST',
  });

  options.dataCollection.addLink(i0, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: 'üí¨ [{{actorType player declension="nominative" capitalised=true}}]: –û—Ç—Å—Ç–∞–Ω—å!',
    type: 'CUSTOM',
    subtype: 'TALK_TO_NPC',
  });

  options.dataCollection.addLink(i1, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: '–•–æ—Ä–æ—à–æ, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —É–º—Ä–∏ –ø–æ–∫–∞ —è –≤–µ—Ä–Ω—É—Å—å',
    operation: `{{updateQuestState "${quest2Id}" "${Quest2States.PHASE_1}"}} {{unloadCurrentNPCInfo}}`,
    type: 'CUSTOM',
    subtype: 'OTHER',
  });

  options.dataCollection.addLink(i1, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: '–ù–µ, —è –Ω–µ –∞–ª—å—Ç—Ä—É–∏—Å—Ç, –¥—Ä—É–≥–∏–º –ø–æ–º–æ–≥–∞—Ç—å. –ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è!',
    operation: `{{updateQuestState "${quest2Id}" "${Quest2States.FINISHED_BAD}"}} {{unloadCurrentNPCInfo}}`,
    type: 'CUSTOM',
    subtype: 'OTHER',
  });

  dataCollection.addLink(spot, {
    ...baseInfo,
    to: npc.entity.interactionId,
    text: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ù–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º',
    condition: `{{questStateIsEQ "${quest2Id}" "${Quest2States.PHASE_1}"}}`,
    operation: `{{loadNPCInfo "${npc2Info.id}"}}`,
    type: 'CUSTOM',
    subtype: 'OTHER',
  });

  const i2 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: `üí¨ [${npc2Info.name}]: –ù—É –∫–∞–∫, —Ç—ã –ø—Ä–∏–Ω–µ—Å?`,
  });

  options.dataCollection.addLink(npc, {
    ...baseInfo,
    to: i2.entity.interactionId,
    text: '',
    condition: `{{questStateIsEQ "${quest2Id}" "${Quest2States.PHASE_1}"}}`,
    type: 'AUTO',
    subtype: 'OTHER',
  });

  const i3 = options.dataCollection.addContainer<InteractionEntity>('Interaction', {
    ...baseInfo,
    text: `üí¨ [${npc2Info.name}]: –í–æ—Ç —Å–ø–∞—Å–∏–±–æ!`,
  });

  options.dataCollection.addLink(i2, {
    ...baseInfo,
    to: i3.entity.interactionId,
    text: '–í–æ—Ç –¥–µ—Ä–∂–∏! (–û—Ç–¥–∞—Ç—å 1 –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è)',
    condition: `{{isGTE (inventory_getItemsNumberByClassName player "POTION" "${Quest1Phase1TakeItemClass.name}") 1}}`,
    operation: `{{updateQuestState "${quest2Id}" "${Quest2States.FINISHED_GOOD}"}}`,
    type: 'CUSTOM',
    subtype: 'OTHER',
    isPrintable: true,
  });

  options.dataCollection.addLink(i3, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: '',
    operation: '{{unloadCurrentNPCInfo}}',
    type: 'AUTO',
    subtype: 'OTHER',
  });

  options.dataCollection.addLink(i2, {
    ...baseInfo,
    to: spot.entity.interactionId,
    text: '–ù–µ—Ç –µ—â–µ',
    operation: '{{unloadCurrentNPCInfo}}',
    type: 'CUSTOM',
    subtype: 'OTHER',
    isPrintable: true,
  });
};
